Vim: Warning: Output is not to a terminal
chdir(/usr/share/vim)[?25l[J
fchdir() to previous dir[J
sourcing "$VIM/vimrc"[J
line 1: " All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just[J

line 2: " /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime[J

line 3: " you can find below.  If you wish to change any of those settings, you should[J

line 4: " do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten[J

line 5: " everytime an upgrade of the vim packages is performed.  It is recommended to[J

line 6: " make changes after sourcing debian.vim since it alters the value of the[J

line 7: " 'compatible' option.[J

line 8: [J

line 9: " This line should not be removed as it ensures that various options are[J

line 10: " properly set to work with the Vim-related packages available in Debian.[J

line 11: runtime! debian.vim[J

Searching for "debian.vim" in "/home/miph/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/debian.vim"[J
Searching for "/usr/share/vim/vimfiles/debian.vim"[J
Searching for "/usr/share/vim/vim73/debian.vim"[J
chdir(/usr/share/vim/vim73)[J
fchdir() to previous dir[J
line 11: sourcing "/usr/share/vim/vim73/debian.vim"[J
line 1: " Debian system-wide default configuration Vim[J

line 2: [J

line 3: set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after[J

line 4: [J

line 5: " Normally we use vim-extensions. If you want true vi-compatibility[J

line 6: " remove change the following statements[J

line 7: set nocompatible^I" Use Vim defaults instead of 100% vi compatibility[J

line 8: set backspace=indent,eol,start^I" more powerful backspacing[J

line 9: [J

line 10: " Now we set some defaults for the editor[J

line 11: set history=50^I^I" keep 50 lines of command line history[J

line 12: set ruler^I^I" show the cursor position all the time[J

line 13: [J

line 14: " modelines have historically been a source of security/resource[J

line 15: " vulnerabilities -- disable by default, even when 'nocompatible' is set[J

line 16: set nomodeline[J

line 17: [J

line 18: " Suffixes that get lower priority when doing tab completion for filenames.[J

line 19: " These are files we are not likely to want to edit or read.[J

line 20: set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc[J

line 21: [J

line 22: " We know xterm-debian is a color terminal[J

line 23: if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"[J

line 24:   set t_Co=16[J

line 25:   set t_Sf=^[[3%dm[J

line 26:   set t_Sb=^[[4%dm[J

line 27: endif[J

line 28: [J

line 29: " Some Debian-specific things[J

line 30: if has("autocmd")[J

line 31:   " set mail filetype for reportbug's temp files[J

line 32:   augroup debian[J

line 33:     au BufRead reportbug-*^I^Iset ft=mail[J

line 34:   augroup END[J

line 35: endif[J

line 36: [J

line 37: " Set paper size from /etc/papersize if available (Debian-specific)[J

line 38: if filereadable("/etc/papersize")[J

line 39:   let s:papersize = matchstr(readfile('/etc/papersize', '', 1), '\p*')[J

line 40:   if strlen(s:papersize)[J

line 41:     exe "set printoptions+=paper:" . s:papersize[J

line 41: set printoptions+=paper:a4[J

line 42:   endif[J

line 43: endif[J

line 44: [J

line 45: if has('gui_running')[J

line 46:   " Make shift-insert work like in Xterm[J

line 47:   map <S-Insert> <MiddleMouse>[J

line 48:   map! <S-Insert> <MiddleMouse>[J

line 49: endif[J

line 50: [J

line 51: if executable("launchpad-integration")[J

line 52:   " Launchpad integration[J

line 53:   an 9999.76 &Help.Get\ Help\ Online\.\.\.             :call <SID>LPI("--info")<CR>[J

line 54:   an 9999.77 &Help.Translate\ This\ Application\.\.\.  :call <SID>LPI("--translate")<CR>[J

line 55:   an 9999.78 &Help.Report\ a\ Problem\.\.\.            :call <SID>LPI("--bugs")<CR>[J

line 56:   an 9999.79 &Help.-lpisep-                            <Nop>[J

line 57: [J

line 58:   fun! s:LPI(opt)[J

line 61: endif[J

finished sourcing /usr/share/vim/vim73/debian.vim[J
continuing in /usr/share/vim/vimrc[J
Searching for "/usr/share/vim/vimfiles/after/debian.vim"[J
Searching for "/home/miph/.vim/after/debian.vim"[J
line 12: [J

line 13: " Uncomment the next line to make Vim more Vi-compatible[J

line 14: " NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous[J

line 15: " options, so any other options should be set AFTER setting 'compatible'.[J

line 16: "set compatible[J

line 17: [J

line 18: " Vim5 and later versions support syntax highlighting. Uncommenting the next[J

line 19: " line enables syntax highlighting by default.[J

line 20: if has("syntax")[J

line 21:   syntax on[J

line 21: so $VIMRUNTIME/syntax/syntax.vim[J

chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 21: sourcing "/usr/share/vim/vim73/syntax/syntax.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 04[J

line 4: [J

line 5: " This file is used for ":syntax on".[J

line 6: " It installs the autocommands and starts highlighting for all buffers.[J

line 7: [J

line 8: if !has("syntax")[J

line 9:   finish[J

line 10: endif[J

line 11: [J

line 12: " If Syntax highlighting appears to be on already, turn it off first, so that[J

line 13: " any leftovers are cleared.[J

line 14: if exists("syntax_on") || exists("syntax_manual")[J

line 15:   so <sfile>:p:h/nosyntax.vim[J

line 16: endif[J

line 17: [J

line 18: " Load the Syntax autocommands and set the default methods for highlighting.[J

line 19: runtime syntax/synload.vim[J

Searching for "syntax/synload.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/syntax/synload.vim"[J
Searching for "/var/lib/vim/addons/syntax/synload.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/synload.vim"[J
Searching for "/usr/share/vim/vim73/syntax/synload.vim"[J
chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 19: sourcing "/usr/share/vim/vim73/syntax/synload.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2012 Feb 11[J

line 4: [J

line 5: " This file sets up for syntax highlighting.[J

line 6: " It is loaded from "syntax.vim" and "manual.vim".[J

line 7: " 1. Set the default highlight groups.[J

line 8: " 2. Install Syntax autocommands for all the available syntax files.[J

line 9: [J

line 10: if !has("syntax")[J

line 11:   finish[J

line 12: endif[J

line 13: [J

line 14: " let others know that syntax has been switched on[J

line 15: let syntax_on = 1[J

line 16: [J

line 17: " Set the default highlighting colors.  Use a color scheme if specified.[J

line 18: if exists("colors_name")[J

line 19:   exe "colors " . colors_name[J

line 20: else[J

line 21:   runtime! syntax/syncolor.vim[J

Searching for "syntax/syncolor.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vim73/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 21: sourcing "/usr/share/vim/vim73/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 44: hi Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 45: hi Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 46: hi Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 47: hi Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 48: hi Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 49: hi PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 50: hi Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 51: hi Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 52: hi Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/share/vim/vim73/syntax/syncolor.vim[J
continuing in /usr/share/vim/vim73/syntax/synload.vim[J
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"[J
Searching for "/home/miph/.vim/after/syntax/syncolor.vim"[J
line 22: endif[J

line 23: [J

line 24: " Line continuation is used here, remove 'C' from 'cpoptions'[J

line 25: let s:cpo_save = &cpo[J

line 26: set cpo&vim[J

line 27: [J

line 28: " First remove all old syntax autocommands.[J

line 29: au! Syntax[J

line 30: [J

line 31: au Syntax *^I^Icall s:SynSet()[J

line 32: [J

line 33: fun! s:SynSet()[J

line 59: [J

line 60: [J

line 61: " Handle adding doxygen to other languages (C, C++, C#, IDL)[J

line 66: au Syntax c,cpp,cs,idl,php if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif[J

line 67: [J

line 68: [J

line 69: " Source the user-specified syntax highlighting file[J

line 70: if exists("mysyntaxfile") && filereadable(expand(mysyntaxfile))[J

line 71:   execute "source " . mysyntaxfile[J

line 72: endif[J

line 73: [J

line 74: " Restore 'cpoptions'[J

line 75: let &cpo = s:cpo_save[J

line 76: unlet s:cpo_save[J

finished sourcing /usr/share/vim/vim73/syntax/synload.vim[J
continuing in /usr/share/vim/vim73/syntax/syntax.vim[J
line 20: [J

line 21: " Load the FileType autocommands if not done yet.[J

line 22: if exists("did_load_filetypes")[J

line 23:   let s:did_ft = 1[J

line 24: else[J

line 25:   filetype on[J

Searching for "filetype.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/filetype.vim"[J
Searching for "/var/lib/vim/addons/filetype.vim"[J
Searching for "/usr/share/vim/vimfiles/filetype.vim"[J
Searching for "/usr/share/vim/vim73/filetype.vim"[J
chdir(/usr/share/vim/vim73)[J
fchdir() to previous dir[J
line 25: sourcing "/usr/share/vim/vim73/filetype.vim"[J
line 1: " Vim support file to detect file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last Change:^I2012 May 18[J

line 5: [J

line 6: " Listen very carefully, I will say this only once[J

line 7: if exists("did_load_filetypes")[J

line 8:   finish[J

line 9: endif[J

line 10: let did_load_filetypes = 1[J

line 11: [J

line 12: " Line continuation is used here, remove 'C' from 'cpoptions'[J

line 13: let s:cpo_save = &cpo[J

line 14: set cpo&vim[J

line 15: [J

line 16: augroup filetypedetect[J

line 17: [J

line 18: " Ignored extensions[J

line 19: if exists("*fnameescape")[J

line 21: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))[J

line 28: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short[J

line 32: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif[J

line 33: elseif &verbose > 0[J

line 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"[J

line 35: endif[J

line 36: [J

line 37: " Pattern used to match file names which should not be inspected.[J

line 38: " Currently finds compressed files.[J

line 39: if !exists("g:ft_ignore_pat")[J

line 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'[J

line 41: endif[J

line 42: [J

line 43: " Function used for patterns that end in a star: don't set the filetype if the[J

line 44: " file name matches ft_ignore_pat.[J

line 45: func! s:StarSetf(ft)[J

line 50: [J

line 51: " Abaqus or Trasys[J

line 52: au BufNewFile,BufRead *.inp^I^I^Icall s:Check_inp()[J

line 53: [J

line 54: func! s:Check_inp()[J

line 73: [J

line 74: " A-A-P recipe[J

line 75: au BufNewFile,BufRead *.aap^I^I^Isetf aap[J

line 76: [J

line 77: " A2ps printing utility[J

line 78: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps[J

line 79: [J

line 80: " ABAB/4[J

line 81: au BufNewFile,BufRead *.abap^I^I^Isetf abap[J

line 82: [J

line 83: " ABC music notation[J

line 84: au BufNewFile,BufRead *.abc^I^I^Isetf abc[J

line 85: [J

line 86: " ABEL[J

line 87: au BufNewFile,BufRead *.abl^I^I^Isetf abel[J

line 88: [J

line 89: " AceDB[J

line 90: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb[J

line 91: [J

line 92: " Ada (83, 9X, 95)[J

line 93: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada[J

line 94: if has("vms")[J

line 95:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada[J

line 96: else[J

line 97:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada[J

line 98: endif[J

line 99: [J

line 100: " AHDL[J

line 101: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl[J

line 102: [J

line 103: " AMPL[J

line 104: au BufNewFile,BufRead *.run^I^I^Isetf ampl[J

line 105: [J

line 106: " Ant[J

line 107: au BufNewFile,BufRead build.xml^I^I^Isetf ant[J

line 108: [J

line 109: " Apache style config file[J

line 110: au BufNewFile,BufRead proftpd.conf*^I^Icall s:StarSetf('apachestyle')[J

line 111: [J

line 112: " Apache config file[J

line 113: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache[J

line 114: [J

line 115: " XA65 MOS6510 cross assembler[J

line 116: au BufNewFile,BufRead *.a65^I^I^Isetf a65[J

line 117: [J

line 118: " Applescript[J

line 119: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript[J

line 120: [J

line 121: " Applix ELF[J

line 123: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif[J

line 124: [J

line 125: " ALSA configuration[J

line 126: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf[J

line 127: [J

line 128: " Arc Macro Language[J

line 129: au BufNewFile,BufRead *.aml^I^I^Isetf aml[J

line 130: [J

line 131: " Arch Inventory file[J

line 132: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch[J

line 133: [J

line 134: " ART*Enterprise (formerly ART-IM)[J

line 135: au BufNewFile,BufRead *.art^I^I^Isetf art[J

line 136: [J

line 137: " ASN.1[J

line 138: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn[J

line 139: [J

line 140: " Active Server Pages (with Visual Basic Script)[J

line 146: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif[J

line 147: [J

line 148: " Active Server Pages (with Perl or Visual Basic Script)[J

line 156: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif[J

line 157: [J

line 158: " Grub (must be before catch *.lst)[J

line 159: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub[J

line 160: [J

line 161: " Assembly (all kinds)[J

line 162: " *.lst is not pure assembly, it has two extra columns (address, byte codes)[J

line 163: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall s:FTasm()[J

line 164: [J

line 165: " This function checks for the kind of assembly that is wanted by the user, or[J

line 166: " can be detected from the first five lines of the file.[J

line 167: func! s:FTasm()[J

line 188: [J

line 189: func! s:FTasmsyntax()[J

line 201: [J

line 202: " Macro (VAX)[J

line 203: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm[J

line 204: [J

line 205: " Atlas[J

line 206: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas[J

line 207: [J

line 208: " Autoit v3[J

line 209: au BufNewFile,BufRead *.au3^I^I^Isetf autoit[J

line 210: [J

line 211: " Autohotkey[J

line 212: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey[J

line 213: [J

line 214: " Automake[J

line 215: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake[J

line 216: [J

line 217: " Autotest .at files are actually m4[J

line 218: au BufNewFile,BufRead *.at^I^I^Isetf m4[J

line 219: [J

line 220: " Avenue[J

line 221: au BufNewFile,BufRead *.ave^I^I^Isetf ave[J

line 222: [J

line 223: " Awk[J

line 224: au BufNewFile,BufRead *.awk^I^I^Isetf awk[J

line 225: [J

line 226: " B[J

line 227: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b[J

line 228: [J

line 229: " BASIC or Visual Basic[J

line 230: au BufNewFile,BufRead *.bas^I^I^Icall s:FTVB("basic")[J

line 231: [J

line 232: " Check if one of the first five lines contains "VB_Name".  In that case it is[J

line 233: " probably a Visual Basic file.  Otherwise it's assumed to be "alt" filetype.[J

line 234: func! s:FTVB(alt)[J

line 241: [J

line 242: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET[J

line 243: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb[J

line 244: [J

line 245: " IBasic file (similar to QBasic)[J

line 246: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic[J

line 247: [J

line 248: " FreeBasic file (similar to QBasic)[J

line 249: au BufNewFile,BufRead *.fb,*.bi^I^I^Isetf freebasic[J

line 250: [J

line 251: " Batch file for MSDOS.[J

line 252: au BufNewFile,BufRead *.bat,*.sys^I^Isetf dosbatch[J

line 253: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.[J

line 255: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif[J

line 256: [J

line 257: " Batch file for 4DOS[J

line 258: au BufNewFile,BufRead *.btm^I^I^Icall s:FTbtm()[J

line 259: func! s:FTbtm()[J

line 266: [J

line 267: " BC calculator[J

line 268: au BufNewFile,BufRead *.bc^I^I^Isetf bc[J

line 269: [J

line 270: " BDF font[J

line 271: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf[J

line 272: [J

line 273: " BibTeX bibliography database file[J

line 274: au BufNewFile,BufRead *.bib^I^I^Isetf bib[J

line 275: [J

line 276: " BibTeX Bibliography Style[J

line 277: au BufNewFile,BufRead *.bst^I^I^Isetf bst[J

line 278: [J

line 279: " BIND configuration[J

line 280: au BufNewFile,BufRead named.conf,rndc.conf^Isetf named[J

line 281: [J

line 282: " BIND zone[J

line 283: au BufNewFile,BufRead named.root^I^Isetf bindzone[J

line 284: au BufNewFile,BufRead *.db^I^I^Icall s:BindzoneCheck('')[J

line 285: [J

line 286: func! s:BindzoneCheck(default)[J

line 293: [J

line 294: " Blank[J

line 295: au BufNewFile,BufRead *.bl^I^I^Isetf blank[J

line 296: [J

line 297: " Blkid cache file[J

line 298: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml[J

line 299: [J

line 300: " C or lpc[J

line 301: au BufNewFile,BufRead *.c^I^I^Icall s:FTlpc()[J

line 302: [J

line 303: func! s:FTlpc()[J

line 316: [J

line 317: " Calendar[J

line 318: au BufNewFile,BufRead calendar^I^I^Isetf calendar[J

line 319: [J

line 320: " C#[J

line 321: au BufNewFile,BufRead *.cs^I^I^Isetf cs[J

line 322: [J

line 323: " Cabal[J

line 324: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal[J

line 325: [J

line 326: " Cdrdao TOC[J

line 327: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc[J

line 328: [J

line 329: " Cdrdao config[J

line 330: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf[J

line 331: [J

line 332: " Cfengine[J

line 333: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine[J

line 334: [J

line 335: " ChaiScript[J

line 336: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript[J

line 337: [J

line 338: " Comshare Dimension Definition Language[J

line 339: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl[J

line 340: [J

line 341: " Conary Recipe[J

line 342: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe[J

line 343: [J

line 344: " Controllable Regex Mutilator[J

line 345: au BufNewFile,BufRead *.crm^I^I^Isetf crm[J

line 346: [J

line 347: " Cyn++[J

line 348: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp[J

line 349: [J

line 350: " Cynlib[J

line 351: " .cc and .cpp files can be C++ or Cynlib.[J

line 353: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif[J

line 355: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif[J

line 356: [J

line 357: " C++[J

line 358: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp[J

line 359: if has("fname_case")[J

line 360:   au BufNewFile,BufRead *.C,*.H setf cpp[J

line 361: endif[J

line 362: [J

line 363: " .h files can be C, Ch C++, ObjC or ObjC++.[J

line 364: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is[J

line 365: " detected automatically.[J

line 366: au BufNewFile,BufRead *.h^I^I^Icall s:FTheader()[J

line 367: [J

line 368: func! s:FTheader()[J

line 383: [J

line 384: " Ch (CHscript)[J

line 385: au BufNewFile,BufRead *.chf^I^I^Isetf ch[J

line 386: [J

line 387: " TLH files are C++ headers generated by Visual C++'s #import from typelibs[J

line 388: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp[J

line 389: [J

line 390: " Cascading Style Sheets[J

line 391: au BufNewFile,BufRead *.css^I^I^Isetf css[J

line 392: [J

line 393: " Century Term Command Scripts (*.cmd too)[J

line 394: au BufNewFile,BufRead *.con^I^I^Isetf cterm[J

line 395: [J

line 396: " Changelog[J

line 398: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch^Isetf debchangelog[J

line 399: [J

line 405: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif[J

line 406: [J

line 410: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif[J

line 411: [J

line 412: " CHILL[J

line 413: au BufNewFile,BufRead *..ch^I^I^Isetf chill[J

line 414: [J

line 415: " Changes for WEB and CWEB or CHILL[J

line 416: au BufNewFile,BufRead *.ch^I^I^Icall s:FTchange()[J

line 417: [J

line 418: " This function checks if one of the first ten lines start with a '@'.  In[J

line 419: " that case it is probably a change file.[J

line 420: " If the first line starts with # or ! it's probably a ch file.[J

line 421: " If a line has "main", "include", "//" ir "/*" it's probably ch.[J

line 422: " Otherwise CHILL is assumed.[J

line 423: func! s:FTchange()[J

line 446: [J

line 447: " ChordPro[J

line 448: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro[J

line 449: [J

line 450: " Clean[J

line 451: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean[J

line 452: [J

line 453: " Clever[J

line 454: au BufNewFile,BufRead *.eni^I^I^Isetf cl[J

line 455: [J

line 456: " Clever or dtd[J

line 457: au BufNewFile,BufRead *.ent^I^I^Icall s:FTent()[J

line 458: [J

line 459: func! s:FTent()[J

line 478: [J

line 479: " Clipper (or FoxPro; could also be eviews)[J

line 485: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif[J

line 486: [J

line 487: " Cmake[J

line 488: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake[J

line 489: [J

line 490: " Cmusrc[J

line 491: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc[J

line 492: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc[J

line 493: [J

line 494: " Cobol[J

line 495: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol[J

line 496: "   cobol or zope form controller python script? (heuristic)[J

line 502: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif[J

line 503: [J

line 504: " Coco/R[J

line 505: au BufNewFile,BufRead *.atg^I^I^Isetf coco[J

line 506: [J

line 507: " Cold Fusion[J

line 508: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf[J

line 509: [J

line 510: " Configure scripts[J

line 511: au BufNewFile,BufRead configure.in,configure.ac setf config[J

line 512: [J

line 513: " CUDA  Cumpute Unified Device Architecture[J

line 514: au BufNewFile,BufRead *.cu^I^I^Isetf cuda[J

line 515: [J

line 516: " WildPackets EtherPeek Decoder[J

line 517: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd[J

line 518: [J

line 519: " Enlightenment configuration files[J

line 520: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c[J

line 521: [J

line 522: " Eterm[J

line 523: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm[J

line 524: [J

line 525: " Lynx config files[J

line 526: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx[J

line 527: [J

line 528: " Quake[J

line 529: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake[J

line 530: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake[J

line 531: [J

line 532: " Quake C[J

line 533: au BufNewFile,BufRead *.qc^I^I^Isetf c[J

line 534: [J

line 535: " Configure files[J

line 536: au BufNewFile,BufRead *.cfg^I^I^Isetf cfg[J

line 537: [J

line 538: " Cucumber[J

line 539: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber[J

line 540: [J

line 541: " Communicating Sequential Processes[J

line 542: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp[J

line 543: [J

line 544: " CUPL logic description and simulation[J

line 545: au BufNewFile,BufRead *.pld^I^I^Isetf cupl[J

line 546: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim[J

line 547: [J

line 548: " Debian Control[J

line 549: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol[J

line 553: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif[J

line 554: [J

line 555: " Debian Sources.list[J

line 556: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources[J

line 557: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources[J

line 558: [J

line 559: " Deny hosts[J

line 560: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts[J

line 561: [J

line 562: " dnsmasq(8) configuration files[J

line 563: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq[J

line 564: [J

line 565: " ROCKLinux package description[J

line 566: au BufNewFile,BufRead *.desc^I^I^Isetf desc[J

line 567: [J

line 568: " the D language or dtrace[J

line 569: au BufNewFile,BufRead *.d^I^I^Icall s:DtraceCheck()[J

line 570: [J

line 571: func! s:DtraceCheck()[J

line 582: [J

line 583: " Desktop files[J

line 584: au BufNewFile,BufRead *.desktop,.directory^Isetf desktop[J

line 585: [J

line 586: " Dict config[J

line 587: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf[J

line 588: [J

line 589: " Dictd config[J

line 590: au BufNewFile,BufRead dictd.conf^I^Isetf dictdconf[J

line 591: [J

line 592: " Diff files[J

line 593: au BufNewFile,BufRead *.diff,*.rej,*.patch^Isetf diff[J

line 594: [J

line 595: " Dircolors[J

line 596: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors[J

line 597: [J

line 598: " Diva (with Skill) or InstallShield[J

line 604: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif[J

line 605: [J

line 606: " DCL (Digital Command Language - vms) or DNS zone file[J

line 607: au BufNewFile,BufRead *.com^I^I^Icall s:BindzoneCheck('dcl')[J

line 608: [J

line 609: " DOT[J

line 610: au BufNewFile,BufRead *.dot^I^I^Isetf dot[J

line 611: [J

line 612: " Dylan - lid files[J

line 613: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid[J

line 614: [J

line 615: " Dylan - intr files (melange)[J

line 616: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr[J

line 617: [J

line 618: " Dylan[J

line 619: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan[J

line 620: [J

line 621: " Microsoft Module Definition[J

line 622: au BufNewFile,BufRead *.def^I^I^Isetf def[J

line 623: [J

line 624: " Dracula[J

line 625: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula[J

line 626: [J

line 627: " Datascript[J

line 628: au BufNewFile,BufRead *.ds^I^I^Isetf datascript[J

line 629: [J

line 630: " dsl[J

line 631: au BufNewFile,BufRead *.dsl^I^I^Isetf dsl[J

line 632: [J

line 633: " DTD (Document Type Definition for XML)[J

line 634: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd[J

line 635: [J

line 636: " EDIF (*.edf,*.edif,*.edn,*.edo)[J

line 637: au BufNewFile,BufRead *.ed\(f\|if\|n\|o\)^Isetf edif[J

line 638: [J

line 639: " Embedix Component Description[J

line 640: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd[J

line 641: [J

line 642: " Eiffel or Specman[J

line 643: au BufNewFile,BufRead *.e,*.E^I^I^Icall s:FTe()[J

line 644: [J

line 645: " Elinks configuration[J

line 646: au BufNewFile,BufRead */etc/elinks.conf,*/.elinks/elinks.conf^Isetf elinks[J

line 647: [J

line 648: func! s:FTe()[J

line 659: [J

line 660: " ERicsson LANGuage; Yaws is erlang too[J

line 661: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang[J

line 662: [J

line 663: " Elm Filter Rules file[J

line 664: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt[J

line 665: [J

line 666: " ESMTP rc file[J

line 667: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc[J

line 668: [J

line 669: " ESQL-C[J

line 670: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc[J

line 671: [J

line 672: " Esterel[J

line 673: au BufNewFile,BufRead *.strl^I^I^Isetf esterel[J

line 674: [J

line 675: " Essbase script[J

line 676: au BufNewFile,BufRead *.csc^I^I^Isetf csc[J

line 677: [J

line 678: " Exim[J

line 679: au BufNewFile,BufRead exim.conf^I^I^Isetf exim[J

line 680: [J

line 681: " Expect[J

line 682: au BufNewFile,BufRead *.exp^I^I^Isetf expect[J

line 683: [J

line 684: " Exports[J

line 685: au BufNewFile,BufRead exports^I^I^Isetf exports[J

line 686: [J

line 687: " Falcon[J

line 688: au BufNewFile,BufRead *.fal^I^I^Isetf falcon[J

line 689: [J

line 690: " Fantom[J

line 691: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan[J

line 692: [J

line 693: " Factor[J

line 694: au BufNewFile,BufRead *.factor^I^I^Isetf factor[J

line 695: [J

line 696: " Fetchmail RC file[J

line 697: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail[J

line 698: [J

line 699: " FlexWiki - disabled, because it has side effects when a .wiki file[J

line 700: " is not actually FlexWiki[J

line 701: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki[J

line 702: [J

line 703: " Focus Executable[J

line 704: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec[J

line 705: [J

line 706: " Focus Master file (but not for auto.master)[J

line 707: au BufNewFile,BufRead auto.master^I^Isetf conf[J

line 708: au BufNewFile,BufRead *.mas,*.master^I^Isetf master[J

line 709: [J

line 710: " Forth[J

line 711: au BufNewFile,BufRead *.fs,*.ft^I^I^Isetf forth[J

line 712: [J

line 713: " Reva Forth[J

line 714: au BufNewFile,BufRead *.frt^I^I^Isetf reva[J

line 715: [J

line 716: " Fortran[J

line 717: if has("fname_case")[J

line 718:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran[J

line 719: endif[J

line 720: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran[J

line 721: [J

line 722: " Framescript[J

line 723: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript[J

line 724: [J

line 725: " FStab[J

line 726: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab[J

line 727: [J

line 728: " GDB command files[J

line 729: au BufNewFile,BufRead .gdbinit^I^I^Isetf gdb[J

line 730: [J

line 731: " GDMO[J

line 732: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo[J

line 733: [J

line 734: " Gedcom[J

line 735: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom[J

line 736: [J

line 737: " Git[J

line 738: au BufNewFile,BufRead *.git/COMMIT_EDITMSG ^Isetf gitcommit[J

line 739: au BufNewFile,BufRead *.git/config,.gitconfig,.gitmodules setf gitconfig[J

line 740: au BufNewFile,BufRead *.git/modules/**/COMMIT_EDITMSG setf gitcommit[J

line 741: au BufNewFile,BufRead *.git/modules/**/config ^Isetf gitconfig[J

line 742: au BufNewFile,BufRead git-rebase-todo      ^Isetf gitrebase[J

line 746: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif[J

line 750: au BufNewFile,BufRead *.git/** if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif[J

line 751: [J

line 752: " Gkrellmrc[J

line 753: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc[J

line 754: [J

line 755: " GP scripts (2.0 and onward)[J

line 756: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp[J

line 757: [J

line 758: " GPG[J

line 759: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg[J

line 760: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg[J

line 761: au BufNewFile,BufRead */usr/**/gnupg/options.skel setf gpg[J

line 762: [J

line 763: " gnash(1) configuration files[J

line 764: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash[J

line 765: [J

line 766: " Gitolite[J

line 767: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite[J

line 768: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')[J

line 769: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc ^Isetf perl[J

line 770: [J

line 771: " Gnuplot scripts[J

line 772: au BufNewFile,BufRead *.gpi^I^I^Isetf gnuplot[J

line 773: [J

line 774: " GrADS scripts[J

line 775: au BufNewFile,BufRead *.gs^I^I^Isetf grads[J

line 776: [J

line 777: " Gretl[J

line 778: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl[J

line 779: [J

line 780: " Groovy[J

line 781: au BufNewFile,BufRead *.groovy^I^I^Isetf groovy[J

line 782: [J

line 783: " GNU Server Pages[J

line 784: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp[J

line 785: [J

line 786: " Group file[J

line 787: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group[J

line 788: [J

line 789: " GTK RC[J

line 790: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc[J

line 791: [J

line 792: " Haml[J

line 793: au BufNewFile,BufRead *.haml^I^I^Isetf haml[J

line 794: [J

line 795: " Hamster Classic | Playground files[J

line 796: au BufNewFile,BufRead *.hsc,*.hsm^I^Isetf hamster[J

line 797: [J

line 798: " Haskell[J

line 799: au BufNewFile,BufRead *.hs,*.hs-boot^I^Isetf haskell[J

line 800: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell[J

line 801: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell[J

line 802: [J

line 803: " Haste[J

line 804: au BufNewFile,BufRead *.ht^I^I^Isetf haste[J

line 805: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc[J

line 806: [J

line 807: " Hercules[J

line 808: au BufNewFile,BufRead *.vc,*.ev,*.rs,*.sum,*.errsum^Isetf hercules[J

line 809: [J

line 810: " HEX (Intel)[J

line 811: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex[J

line 812: [J

line 813: " Tilde (must be before HTML)[J

line 814: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde[J

line 815: [J

line 816: " HTML (.shtml and .stm for server side)[J

line 817: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call s:FThtml()[J

line 818: [J

line 819: " Distinguish between HTML, XHTML and Django[J

line 820: func! s:FThtml()[J

line 835: [J

line 836: " HTML with Ruby - eRuby[J

line 837: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby[J

line 838: [J

line 839: " HTML with M4[J

line 840: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4[J

line 841: [J

line 842: " HTML Cheetah template[J

line 843: au BufNewFile,BufRead *.tmpl^I^I^Isetf htmlcheetah[J

line 844: [J

line 845: " Host config[J

line 846: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf[J

line 847: [J

line 848: " Hosts access[J

line 849: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess[J

line 850: [J

line 851: " Hyper Builder[J

line 852: au BufNewFile,BufRead *.hb^I^I^Isetf hb[J

line 853: [J

line 854: " Icon[J

line 855: au BufNewFile,BufRead *.icn^I^I^Isetf icon[J

line 856: [J

line 857: " IDL (Interface Description Language)[J

line 858: au BufNewFile,BufRead *.idl^I^I^Icall s:FTidl()[J

line 859: [J

line 860: " Distinguish between standard IDL and MS-IDL[J

line 861: func! s:FTidl()[J

line 872: [J

line 873: " Microsoft IDL (Interface Description Language)  Also *.idl[J

line 874: " MOF = WMI (Windows Management Instrumentation) Managed Object Format[J

line 875: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl[J

line 876: [J

line 877: " Icewm menu[J

line 878: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu[J

line 879: [J

line 880: " Indent profile (must come before IDL *.pro!)[J

line 881: au BufNewFile,BufRead .indent.pro^I^Isetf indent[J

line 882: au BufNewFile,BufRead indent.pro^I^Icall s:ProtoCheck('indent')[J

line 883: [J

line 884: " IDL (Interactive Data Language)[J

line 885: au BufNewFile,BufRead *.pro^I^I^Icall s:ProtoCheck('idlang')[J

line 886: [J

line 887: " Distinguish between "default" and Cproto prototype file. */[J

line 888: func! s:ProtoCheck(default)[J

line 900: [J

line 901: [J

line 902: " Indent RC[J

line 903: au BufNewFile,BufRead indentrc^I^I^Isetf indent[J

line 904: [J

line 905: " Inform[J

line 906: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform[J

line 907: [J

line 908: " Initng[J

line 909: au BufNewFile,BufRead */etc/initng/**/*.i,*.ii^Isetf initng[J

line 910: [J

line 911: " Ipfilter[J

line 912: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter[J

line 913: [J

line 914: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)[J

line 915: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl[J

line 916: [J

line 917: " .INI file for MSDOS[J

line 918: au BufNewFile,BufRead *.ini^I^I^Isetf dosini[J

line 919: [J

line 920: " SysV Inittab[J

line 921: au BufNewFile,BufRead inittab^I^I^Isetf inittab[J

line 922: [J

line 923: " Inno Setup[J

line 924: au BufNewFile,BufRead *.iss^I^I^Isetf iss[J

line 925: [J

line 926: " JAL[J

line 927: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal[J

line 928: [J

line 929: " Jam[J

line 930: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam[J

line 931: [J

line 932: " Java[J

line 933: au BufNewFile,BufRead *.java,*.jav^I^Isetf java[J

line 934: [J

line 935: " JavaCC[J

line 936: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc[J

line 937: [J

line 938: " JavaScript, ECMAScript[J

line 939: au BufNewFile,BufRead *.js,*.javascript,*.es,*.jsx,*.json   setf javascript[J

line 940: [J

line 941: " Java Server Pages[J

line 942: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp[J

line 943: [J

line 944: " Java Properties resource file (note: doesn't catch font.properties.pl)[J

line 945: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties[J

line 946: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')[J

line 947: [J

line 948: " Jess[J

line 949: au BufNewFile,BufRead *.clp^I^I^Isetf jess[J

line 950: [J

line 951: " Jgraph[J

line 952: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph[J

line 953: [J

line 954: " Jovial[J

line 955: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial[J

line 956: [J

line 957: " Kixtart[J

line 958: au BufNewFile,BufRead *.kix^I^I^Isetf kix[J

line 959: [J

line 960: " Kimwitu[++][J

line 961: au BufNewFile,BufRead *.k^I^I^Isetf kwt[J

line 962: [J

line 963: " KDE script[J

line 964: au BufNewFile,BufRead *.ks^I^I^Isetf kscript[J

line 965: [J

line 966: " Kconfig[J

line 967: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig[J

line 968: [J

line 969: " Lace (ISE)[J

line 970: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace[J

line 971: [J

line 972: " Latte[J

line 973: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte[J

line 974: [J

line 975: " Limits[J

line 976: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits[J

line 977: [J

line 978: " LambdaProlog (*.mod too, see Modsim)[J

line 979: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog[J

line 980: [J

line 981: " LDAP LDIF[J

line 982: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif[J

line 983: [J

line 984: " Ld loader[J

line 985: au BufNewFile,BufRead *.ld^I^I^Isetf ld[J

line 986: [J

line 987: " Lex[J

line 988: au BufNewFile,BufRead *.lex,*.l^I^I^Isetf lex[J

line 989: [J

line 990: " Libao[J

line 991: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao[J

line 992: [J

line 993: " Libsensors[J

line 994: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors[J

line 995: [J

line 996: " LFTP[J

line 997: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp[J

line 998: [J

line 999: " Lifelines (or Lex for C++!)[J

line 1000: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines[J

line 1001: [J

line 1002: " Lilo: Linux loader[J

line 1003: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo[J

line 1004: [J

line 1005: " Lisp (*.el = ELisp, *.cl = Common Lisp, *.jl = librep Lisp)[J

line 1006: if has("fname_case")[J

line 1007:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,*.L,.emacs,.sawfishrc setf lisp[J

line 1008: else[J

line 1009:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,.emacs,.sawfishrc setf lisp[J

line 1010: endif[J

line 1011: [J

line 1012: " SBCL implementation of Common Lisp[J

line 1013: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp[J

line 1014: [J

line 1015: " Liquid[J

line 1016: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid[J

line 1017: [J

line 1018: " Lite[J

line 1019: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite[J

line 1020: [J

line 1021: " LiteStep RC files[J

line 1022: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep[J

line 1023: [J

line 1024: " Login access[J

line 1025: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess[J

line 1026: [J

line 1027: " Login defs[J

line 1028: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs[J

line 1029: [J

line 1030: " Logtalk[J

line 1031: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk[J

line 1032: [J

line 1033: " LOTOS[J

line 1034: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos[J

line 1035: [J

line 1036: " Lout (also: *.lt)[J

line 1037: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout[J

line 1038: [J

line 1039: " Lua[J

line 1040: au BufNewFile,BufRead *.lua^I^I^Isetf lua[J

line 1041: [J

line 1042: " Linden Scripting Language (Second Life)[J

line 1043: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl[J

line 1044: [J

line 1045: " Lynx style file (or LotusScript!)[J

line 1046: au BufNewFile,BufRead *.lss^I^I^Isetf lss[J

line 1047: [J

line 1048: " M4[J

line 1050: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif[J

line 1051: [J

line 1052: " MaGic Point[J

line 1053: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp[J

line 1054: [J

line 1055: " Mail (for Elm, trn, mutt, muttng, rn, slrn)[J

line 1056: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail[J

line 1057: [J

line 1058: " Mail aliases[J

line 1059: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases[J

line 1060: [J

line 1061: " Mailcap configuration file[J

line 1062: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap[J

line 1063: [J

line 1064: " Makefile[J

line 1065: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make[J

line 1066: [J

line 1067: " MakeIndex[J

line 1068: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist[J

line 1069: [J

line 1070: " Manpage[J

line 1071: au BufNewFile,BufRead *.man^I^I^Isetf man[J

line 1072: [J

line 1073: " Man config[J

line 1074: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf[J

line 1075: [J

line 1076: " Maple V[J

line 1077: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple[J

line 1078: [J

line 1079: " Map (UMN mapserver config file)[J

line 1080: au BufNewFile,BufRead *.map^I^I^Isetf map[J

line 1081: [J

line 1082: " Markdown[J

line 1083: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,README.md  setf markdown[J

line 1084: [J

line 1085: " Mason[J

line 1086: au BufNewFile,BufRead *.mason,*.mhtml^I^Isetf mason[J

line 1087: [J

line 1088: " Matlab or Objective C[J

line 1089: au BufNewFile,BufRead *.m^I^I^Icall s:FTm()[J

line 1090: [J

line 1091: func! s:FTm()[J

line 1115: [J

line 1116: " Mathematica notebook[J

line 1117: au BufNewFile,BufRead *.nb^I^I^Isetf mma[J

line 1118: [J

line 1119: " Maya Extension Language[J

line 1120: au BufNewFile,BufRead *.mel^I^I^Isetf mel[J

line 1121: [J

line 1122: " Mercurial config (looks like generic config file)[J

line 1123: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg[J

line 1124: [J

line 1125: " Messages (logs mostly)[J

line 1126: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages[J

line 1127: [J

line 1128: " Metafont[J

line 1129: au BufNewFile,BufRead *.mf^I^I^Isetf mf[J

line 1130: [J

line 1131: " MetaPost[J

line 1132: au BufNewFile,BufRead *.mp^I^I^Isetf mp[J

line 1133: [J

line 1134: " MGL[J

line 1135: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl[J

line 1136: [J

line 1137: " MMIX or VMS makefile[J

line 1138: au BufNewFile,BufRead *.mms^I^I^Icall s:FTmms()[J

line 1139: [J

line 1140: " Symbian meta-makefile definition (MMP)[J

line 1141: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp[J

line 1142: [J

line 1143: func! s:FTmms()[J

line 1159: [J

line 1160: [J

line 1161: " Modsim III (or LambdaProlog)[J

line 1167: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif[J

line 1168: [J

line 1169: " Modula 2[J

line 1170: au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.md,*.mi setf modula2[J

line 1171: [J

line 1172: " Modula 3 (.m3, .i3, .mg, .ig)[J

line 1173: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3[J

line 1174: [J

line 1175: " Monk[J

line 1176: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk[J

line 1177: [J

line 1178: " MOO[J

line 1179: au BufNewFile,BufRead *.moo^I^I^Isetf moo[J

line 1180: [J

line 1181: " Modconf[J

line 1182: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf[J

line 1183: [J

line 1184: " Mplayer config[J

line 1185: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf[J

line 1186: [J

line 1187: " Moterola S record[J

line 1188: au BufNewFile,BufRead *.s19,*.s28,*.s37^I^Isetf srec[J

line 1189: [J

line 1190: " Mrxvtrc[J

line 1191: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc[J

line 1192: [J

line 1193: " Msql[J

line 1194: au BufNewFile,BufRead *.msql^I^I^Isetf msql[J

line 1195: [J

line 1196: " Mysql[J

line 1197: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql[J

line 1198: [J

line 1199: " Mutt setup files (must be before catch *.rc)[J

line 1200: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')[J

line 1201: [J

line 1202: " M$ Resource files[J

line 1203: au BufNewFile,BufRead *.rc^I^I^Isetf rc[J

line 1204: [J

line 1205: " MuPAD source[J

line 1206: au BufRead,BufNewFile *.mu^I^I^Isetf mupad[J

line 1207: [J

line 1208: " Mush[J

line 1209: au BufNewFile,BufRead *.mush^I^I^Isetf mush[J

line 1210: [J

line 1211: " Mutt setup file (also for Muttng)[J

line 1212: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc[J

line 1213: [J

line 1214: " Nano[J

line 1215: au BufNewFile,BufRead */etc/nanorc,.nanorc^Isetf nanorc[J

line 1216: [J

line 1217: " Nastran input/DMAP[J

line 1218: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran[J

line 1219: [J

line 1220: " Natural[J

line 1221: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural[J

line 1222: [J

line 1223: " Netrc[J

line 1224: au BufNewFile,BufRead .netrc^I^I^Isetf netrc[J

line 1225: [J

line 1226: " Ninja file[J

line 1227: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja[J

line 1228: [J

line 1229: " Novell netware batch files[J

line 1230: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf[J

line 1231: [J

line 1232: " Nroff/Troff (*.ms and *.t are checked below)[J

line 1236: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif[J

line 1237: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff[J

line 1238: au BufNewFile,BufRead *.[1-9]^I^I^Icall s:FTnroff()[J

line 1239: [J

line 1240: " This function checks if one of the first five lines start with a dot.  In[J

line 1241: " that case it is probably an nroff file: 'filetype' is set and 1 is returned.[J

line 1242: func! s:FTnroff()[J

line 1249: [J

line 1250: " Nroff or Objective C++[J

line 1251: au BufNewFile,BufRead *.mm^I^I^Icall s:FTmm()[J

line 1252: [J

line 1253: func! s:FTmm()[J

line 1265: [J

line 1266: " Not Quite C[J

line 1267: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc[J

line 1268: [J

line 1269: " NSIS[J

line 1270: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis[J

line 1271: [J

line 1272: " OCAML[J

line 1273: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit^Isetf ocaml[J

line 1274: [J

line 1275: " Occam[J

line 1276: au BufNewFile,BufRead *.occ^I^I^Isetf occam[J

line 1277: [J

line 1278: " Omnimark[J

line 1279: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark[J

line 1280: [J

line 1281: " OpenROAD[J

line 1282: au BufNewFile,BufRead *.or^I^I^Isetf openroad[J

line 1283: [J

line 1284: " OPL[J

line 1285: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl[J

line 1286: [J

line 1287: " Oracle config file[J

line 1288: au BufNewFile,BufRead *.ora^I^I^Isetf ora[J

line 1289: [J

line 1290: " Packet filter conf[J

line 1291: au BufNewFile,BufRead pf.conf^I^I^Isetf pf[J

line 1292: [J

line 1293: " Pam conf[J

line 1294: au BufNewFile,BufRead */etc/pam.conf^I^Isetf pamconf[J

line 1295: [J

line 1296: " PApp[J

line 1297: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp[J

line 1298: [J

line 1299: " Password file[J

line 1300: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd[J

line 1301: [J

line 1302: " Pascal (also *.p)[J

line 1303: au BufNewFile,BufRead *.pas^I^I^Isetf pascal[J

line 1304: [J

line 1305: " Delphi project file[J

line 1306: au BufNewFile,BufRead *.dpr^I^I^Isetf pascal[J

line 1307: [J

line 1308: " PDF[J

line 1309: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf[J

line 1310: [J

line 1311: " Perl[J

line 1312: if has("fname_case")[J

line 1313:   au BufNewFile,BufRead *.pl,*.PL^I^Icall s:FTpl()[J

line 1314: else[J

line 1315:   au BufNewFile,BufRead *.pl^I^I^Icall s:FTpl()[J

line 1316: endif[J

line 1317: au BufNewFile,BufRead *.plx,*.al^I^Isetf perl[J

line 1318: au BufNewFile,BufRead *.p6,*.pm6^I^Isetf perl6[J

line 1319: [J

line 1320: func! s:FTpl()[J

line 1334: [J

line 1335: " Perl, XPM or XPM2[J

line 1343: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif[J

line 1344: [J

line 1345: " Perl POD[J

line 1346: au BufNewFile,BufRead *.pod^I^I^Isetf pod[J

line 1347: [J

line 1348: " Php, php3, php4, etc.[J

line 1349: " Also Phtml (was used for PHP 2 in the past)[J

line 1350: " Also .ctp for Cake template file[J

line 1351: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp^Isetf php[J

line 1352: [J

line 1353: " Pike[J

line 1354: au BufNewFile,BufRead *.pike,*.lpc,*.ulpc,*.pmod setf pike[J

line 1355: [J

line 1356: " Pinfo config[J

line 1357: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo[J

line 1358: [J

line 1359: " Palm Resource compiler[J

line 1360: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc[J

line 1361: [J

line 1362: " Pine config[J

line 1363: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine[J

line 1364: [J

line 1365: " PL/M (also: *.inp)[J

line 1366: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm[J

line 1367: [J

line 1368: " PL/SQL[J

line 1369: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql[J

line 1370: [J

line 1371: " PLP[J

line 1372: au BufNewFile,BufRead *.plp^I^I^Isetf plp[J

line 1373: [J

line 1374: " PO and PO template (GNU gettext)[J

line 1375: au BufNewFile,BufRead *.po,*.pot^I^Isetf po[J

line 1376: [J

line 1377: " Postfix main config[J

line 1378: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain[J

line 1379: [J

line 1380: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)[J

line 1381: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr[J

line 1382: [J

line 1383: " PostScript Printer Description[J

line 1384: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd[J

line 1385: [J

line 1386: " Povray[J

line 1387: au BufNewFile,BufRead *.pov^I^I^Isetf pov[J

line 1388: [J

line 1389: " Povray configuration[J

line 1390: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini[J

line 1391: [J

line 1392: " Povray, PHP or assembly[J

line 1393: au BufNewFile,BufRead *.inc^I^I^Icall s:FTinc()[J

line 1394: [J

line 1395: func! s:FTinc()[J

line 1416: [J

line 1417: " Printcap and Termcap[J

line 1419: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap[J

line 1421: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap[J

line 1422: [J

line 1423: " PCCTS / ANTRL[J

line 1424: "au BufNewFile,BufRead *.g^I^I^Isetf antrl[J

line 1425: au BufNewFile,BufRead *.g^I^I^Isetf pccts[J

line 1426: [J

line 1427: " PPWizard[J

line 1428: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz[J

line 1429: [J

line 1430: " Obj 3D file format[J

line 1431: " TODO: is there a way to avoid MS-Windows Object files?[J

line 1432: au BufNewFile,BufRead *.obj^I^I^Isetf obj[J

line 1433: [J

line 1434: " Oracle Pro*C/C++[J

line 1435: au BufNewFile,BufRead *.pc^I^I^Isetf proc[J

line 1436: [J

line 1437: " Privoxy actions file[J

line 1438: au BufNewFile,BufRead *.action^I^I^Isetf privoxy[J

line 1439: [J

line 1440: " Procmail[J

line 1441: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail[J

line 1442: [J

line 1443: " Progress or CWEB[J

line 1444: au BufNewFile,BufRead *.w^I^I^Icall s:FTprogress_cweb()[J

line 1445: [J

line 1446: func! s:FTprogress_cweb()[J

line 1457: [J

line 1458: " Progress or assembly[J

line 1459: au BufNewFile,BufRead *.i^I^I^Icall s:FTprogress_asm()[J

line 1460: [J

line 1461: func! s:FTprogress_asm()[J

line 1483: [J

line 1484: " Progress or Pascal[J

line 1485: au BufNewFile,BufRead *.p^I^I^Icall s:FTprogress_pascal()[J

line 1486: [J

line 1487: func! s:FTprogress_pascal()[J

line 1511: [J

line 1512: [J

line 1513: " Software Distributor Product Specification File (POSIX 1387.2-1995)[J

line 1514: au BufNewFile,BufRead *.psf^I^I^Isetf psf[J

line 1518: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif[J

line 1519: [J

line 1520: " Prolog[J

line 1521: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog[J

line 1522: [J

line 1523: " Promela[J

line 1524: au BufNewFile,BufRead *.pml^I^I^Isetf promela[J

line 1525: [J

line 1526: " Protocols[J

line 1527: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols[J

line 1528: [J

line 1529: " Pyrex[J

line 1530: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex[J

line 1531: [J

line 1532: " Python[J

line 1533: au BufNewFile,BufRead *.py,*.pyw^I^Isetf python[J

line 1534: [J

line 1535: " Quixote (Python-based web framework)[J

line 1536: au BufNewFile,BufRead *.ptl^I^I^Isetf python[J

line 1537: [J

line 1538: " Radiance[J

line 1539: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance[J

line 1540: [J

line 1541: " Ratpoison config/command files[J

line 1542: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison[J

line 1543: [J

line 1544: " RCS file[J

line 1545: au BufNewFile,BufRead *\,v^I^I^Isetf rcs[J

line 1546: [J

line 1547: " Readline[J

line 1548: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline[J

line 1549: [J

line 1550: " Registry for MS-Windows[J

line 1552: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif[J

line 1553: [J

line 1554: " Renderman Interface Bytestream[J

line 1555: au BufNewFile,BufRead *.rib^I^I^Isetf rib[J

line 1556: [J

line 1557: " Rexx[J

line 1558: au BufNewFile,BufRead *.rexx,*.rex,*.jrexx,*.rxj,*.orx^Isetf rexx[J

line 1559: [J

line 1560: " R (Splus)[J

line 1561: if has("fname_case")[J

line 1562:   au BufNewFile,BufRead *.s,*.S^I^I^Isetf r[J

line 1563: else[J

line 1564:   au BufNewFile,BufRead *.s^I^I^Isetf r[J

line 1565: endif[J

line 1566: [J

line 1567: " R Help file[J

line 1568: if has("fname_case")[J

line 1569:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp[J

line 1570: else[J

line 1571:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp[J

line 1572: endif[J

line 1573: [J

line 1574: " R noweb file[J

line 1575: if has("fname_case")[J

line 1576:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb[J

line 1577: else[J

line 1578:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb[J

line 1579: endif[J

line 1580: [J

line 1581: " Rexx, Rebol or R[J

line 1582: au BufNewFile,BufRead *.r,*.R^I^I^Icall s:FTr()[J

line 1583: [J

line 1584: func! s:FTr()[J

line 1616: [J

line 1617: " Remind[J

line 1618: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind[J

line 1619: [J

line 1620: " Resolv.conf[J

line 1621: au BufNewFile,BufRead resolv.conf^I^Isetf resolv[J

line 1622: [J

line 1623: " Relax NG Compact[J

line 1624: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc[J

line 1625: [J

line 1626: " RPL/2[J

line 1627: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl[J

line 1628: [J

line 1629: " Robots.txt[J

line 1630: au BufNewFile,BufRead robots.txt^I^Isetf robots[J

line 1631: [J

line 1632: " Rpcgen[J

line 1633: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen[J

line 1634: [J

line 1635: " reStructuredText Documentation Format[J

line 1636: au BufNewFile,BufRead *.rst^I^I^Isetf rst[J

line 1637: [J

line 1638: " RTF[J

line 1639: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf[J

line 1640: [J

line 1641: " Interactive Ruby shell[J

line 1642: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby[J

line 1643: [J

line 1644: " Ruby[J

line 1645: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby[J

line 1646: [J

line 1647: " RubyGems[J

line 1648: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby[J

line 1649: [J

line 1650: " Rackup[J

line 1651: au BufNewFile,BufRead *.ru^I^I^Isetf ruby[J

line 1652: [J

line 1653: " Bundler[J

line 1654: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby[J

line 1655: [J

line 1656: " Ruby on Rails[J

line 1657: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby[J

line 1658: [J

line 1659: " Rantfile and Rakefile is like Ruby[J

line 1660: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby[J

line 1661: [J

line 1662: " S-lang (or shader language, or SmallLisp)[J

line 1663: au BufNewFile,BufRead *.sl^I^I^Isetf slang[J

line 1664: [J

line 1665: " Samba config[J

line 1666: au BufNewFile,BufRead smb.conf^I^I^Isetf samba[J

line 1667: [J

line 1668: " SAS script[J

line 1669: au BufNewFile,BufRead *.sas^I^I^Isetf sas[J

line 1670: [J

line 1671: " Sass[J

line 1672: au BufNewFile,BufRead *.sass^I^I^Isetf sass[J

line 1673: [J

line 1674: " Sather[J

line 1675: au BufNewFile,BufRead *.sa^I^I^Isetf sather[J

line 1676: [J

line 1677: " Scilab[J

line 1678: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab[J

line 1679: [J

line 1680: " SCSS[J

line 1681: au BufNewFile,BufRead *.scss^I^I^Isetf scss[J

line 1682: [J

line 1683: " SD: Streaming Descriptors[J

line 1684: au BufNewFile,BufRead *.sd^I^I^Isetf sd[J

line 1685: [J

line 1686: " SDL[J

line 1687: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl[J

line 1688: [J

line 1689: " sed[J

line 1690: au BufNewFile,BufRead *.sed^I^I^Isetf sed[J

line 1691: [J

line 1692: " Sieve (RFC 3028)[J

line 1693: au BufNewFile,BufRead *.siv^I^I^Isetf sieve[J

line 1694: [J

line 1695: " Sendmail[J

line 1696: au BufNewFile,BufRead sendmail.cf^I^Isetf sm[J

line 1697: [J

line 1698: " Sendmail .mc files are actually m4.  Could also be MS Message text file.[J

line 1699: au BufNewFile,BufRead *.mc^I^I^Icall s:McSetf()[J

line 1700: [J

line 1701: func! s:McSetf()[J

line 1716: [J

line 1717: " Services[J

line 1718: au BufNewFile,BufRead */etc/services^I^Isetf services[J

line 1719: [J

line 1720: " Service Location config[J

line 1721: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf[J

line 1722: [J

line 1723: " Service Location registration[J

line 1724: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg[J

line 1725: [J

line 1726: " Service Location SPI[J

line 1727: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi[J

line 1728: [J

line 1729: " Setserial config[J

line 1730: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial[J

line 1731: [J

line 1732: " SGML[J

line 1741: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type="sgml" |   setf docbk | else |   setf sgml | endif[J

line 1742: [J

line 1743: " SGMLDECL[J

line 1747: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif[J

line 1748: [J

line 1749: " SGML catalog file[J

line 1750: au BufNewFile,BufRead catalog^I^I^Isetf catalog[J

line 1751: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')[J

line 1752: [J

line 1753: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.[J

line 1754: " Gentoo ebuilds are actually bash scripts[J

line 1755: au BufNewFile,BufRead .bashrc*,bashrc,bash.bashrc,.bash_profile*,.bash_logout*,*.bash,*.ebuild call SetFileTypeSH("bash")[J

line 1756: au BufNewFile,BufRead .kshrc*,*.ksh call SetFileTypeSH("ksh")[J

line 1757: au BufNewFile,BufRead */etc/profile,.profile*,*.sh,*.env call SetFileTypeSH(getline(1))[J

line 1758: [J

line 1759: " Also called from scripts.vim.[J

line 1760: func! SetFileTypeSH(name)[J

line 1799: [J

line 1800: " For shell-like file types, check for an "exec" command hidden in a comment,[J

line 1801: " as used for Tcl.[J

line 1802: " Also called from scripts.vim, thus can't be local to this script.[J

line 1803: func! SetFileTypeShell(name)[J

line 1822: [J

line 1823: " tcsh scripts[J

line 1824: au BufNewFile,BufRead .tcshrc*,*.tcsh,tcsh.tcshrc,tcsh.login^Icall SetFileTypeShell("tcsh")[J

line 1825: [J

line 1826: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)[J

line 1827: au BufNewFile,BufRead .login*,.cshrc*,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call s:CSH()[J

line 1828: [J

line 1829: func! s:CSH()[J

line 1838: [J

line 1839: " Z-Shell script[J

line 1840: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh[J

line 1841: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')[J

line 1842: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh[J

line 1843: [J

line 1844: " Scheme[J

line 1845: au BufNewFile,BufRead *.scm,*.ss,*.rkt^I^Isetf scheme[J

line 1846: [J

line 1847: " Screen RC[J

line 1848: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen[J

line 1849: [J

line 1850: " Simula[J

line 1851: au BufNewFile,BufRead *.sim^I^I^Isetf simula[J

line 1852: [J

line 1853: " SINDA[J

line 1854: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda[J

line 1855: [J

line 1856: " SiSU[J

line 1857: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu[J

line 1858: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu[J

line 1859: [J

line 1860: " SKILL[J

line 1861: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill[J

line 1862: [J

line 1863: " SLRN[J

line 1864: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc[J

line 1865: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc[J

line 1866: [J

line 1867: " Smalltalk (and TeX)[J

line 1868: au BufNewFile,BufRead *.st^I^I^Isetf st[J

line 1874: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | else |  setf st | endif[J

line 1875: [J

line 1876: " Smarty templates[J

line 1877: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty[J

line 1878: [J

line 1879: " SMIL or XML[J

line 1885: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif[J

line 1886: [J

line 1887: " SMIL or SNMP MIB file[J

line 1893: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif[J

line 1894: [J

line 1895: " SMITH[J

line 1896: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith[J

line 1897: [J

line 1898: " Snobol4 and spitbol[J

line 1899: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4[J

line 1900: [J

line 1901: " SNMP MIB files[J

line 1902: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib[J

line 1903: [J

line 1904: " Snort Configuration[J

line 1905: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog[J

line 1906: au BufNewFile,BufRead *.rules^I^I^Icall s:FTRules()[J

line 1907: [J

line 1908: let s:ft_rules_udev_rules_pattern = '^\s*\cudev_rules\s*=\s*"\([^"]\{-1,}\)/*".*'[J

line 1909: func! s:FTRules()[J

line 1937: [J

line 1938: [J

line 1939: " Spec (Linux RPM)[J

line 1940: au BufNewFile,BufRead *.spec^I^I^Isetf spec[J

line 1941: [J

line 1942: " Speedup (AspenTech plant simulator)[J

line 1943: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup[J

line 1944: [J

line 1945: " Slice[J

line 1946: au BufNewFile,BufRead *.ice^I^I^Isetf slice[J

line 1947: [J

line 1948: " Spice[J

line 1949: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice[J

line 1950: [J

line 1951: " Spyce[J

line 1952: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce[J

line 1953: [J

line 1954: " Squid[J

line 1955: au BufNewFile,BufRead squid.conf^I^Isetf squid[J

line 1956: [J

line 1957: " SQL for Oracle Designer[J

line 1958: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql[J

line 1959: [J

line 1960: " SQL[J

line 1961: au BufNewFile,BufRead *.sql^I^I^Icall s:SQL()[J

line 1962: [J

line 1963: func! s:SQL()[J

line 1970: [J

line 1971: " SQLJ[J

line 1972: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj[J

line 1973: [J

line 1974: " SQR[J

line 1975: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr[J

line 1976: [J

line 1977: " OpenSSH configuration[J

line 1978: au BufNewFile,BufRead ssh_config,*/.ssh/config^Isetf sshconfig[J

line 1979: [J

line 1980: " OpenSSH server configuration[J

line 1981: au BufNewFile,BufRead sshd_config^I^Isetf sshdconfig[J

line 1982: [J

line 1983: " Stata[J

line 1984: au BufNewFile,BufRead *.ado,*.class,*.do,*.imata,*.mata   setf stata[J

line 1985: [J

line 1986: " SMCL[J

line 1987: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl[J

line 1988: [J

line 1989: " Stored Procedures[J

line 1990: au BufNewFile,BufRead *.stp^I^I^Isetf stp[J

line 1991: [J

line 1992: " Standard ML[J

line 1993: au BufNewFile,BufRead *.sml^I^I^Isetf sml[J

line 1994: [J

line 1995: " Sratus VOS command macro[J

line 1996: au BufNewFile,BufRead *.cm^I^I^Isetf voscm[J

line 1997: [J

line 1998: " Sysctl[J

line 1999: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl[J

line 2000: [J

line 2001: " Synopsys Design Constraints[J

line 2002: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc[J

line 2003: [J

line 2004: " Sudoers[J

line 2005: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers[J

line 2006: [J

line 2007: " SVG (Scalable Vector Graphics)[J

line 2008: au BufNewFile,BufRead *.svg^I^I^Isetf svg[J

line 2009: [J

line 2010: " If the file has an extension of 't' and is in a directory 't' then it is[J

line 2011: " almost certainly a Perl test file.[J

line 2012: " If the first line starts with '#' and contains 'perl' it's probably a Perl[J

line 2013: " file.[J

line 2014: " (Slow test) If a file contains a 'use' statement then it is almost certainly[J

line 2015: " a Perl file.[J

line 2016: func! s:FTperl()[J

line 2031: [J

line 2032: " Tads (or Nroff or Perl test file)[J

line 2034: au BufNewFile,BufRead *.t if !s:FTnroff() && !s:FTperl() | setf tads | endif[J

line 2035: [J

line 2036: " Tags[J

line 2037: au BufNewFile,BufRead tags^I^I^Isetf tags[J

line 2038: [J

line 2039: " TAK[J

line 2040: au BufNewFile,BufRead *.tak^I^I^Isetf tak[J

line 2041: [J

line 2042: " Task[J

line 2043: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata[J

line 2044: au BufRead,BufNewFile *.task                    setf taskedit[J

line 2045: [J

line 2046: " Tcl (JACL too)[J

line 2047: au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl^Isetf tcl[J

line 2048: [J

line 2049: " TealInfo[J

line 2050: au BufNewFile,BufRead *.tli^I^I^Isetf tli[J

line 2051: [J

line 2052: " Telix Salt[J

line 2053: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt[J

line 2054: [J

line 2055: " Terminfo[J

line 2056: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo[J

line 2057: [J

line 2058: " TeX[J

line 2059: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex[J

line 2060: au BufNewFile,BufRead *.tex^I^I^Icall s:FTtex()[J

line 2061: [J

line 2062: " Choose context, plaintex, or tex (LaTeX) based on these rules:[J

line 2063: " 1. Check the first line of the file for "%&<format>".[J

line 2064: " 2. Check the first 1000 non-comment lines for LaTeX or ConTeXt keywords.[J

line 2065: " 3. Default to "latex" or to g:tex_flavor, can be set in user's vimrc.[J

line 2066: func! s:FTtex()[J

line 2113: [J

line 2114: " ConTeXt[J

line 2115: au BufNewFile,BufRead tex/context/*/*.tex,*.mkii,*.mkiv   setf context[J

line 2116: [J

line 2117: " Texinfo[J

line 2118: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo[J

line 2119: [J

line 2120: " TeX configuration[J

line 2121: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf[J

line 2122: [J

line 2123: " Tidy config[J

line 2124: au BufNewFile,BufRead .tidyrc,tidyrc^I^Isetf tidy[J

line 2125: [J

line 2126: " TF mud client[J

line 2127: au BufNewFile,BufRead *.tf,.tfrc,tfrc^I^Isetf tf[J

line 2128: [J

line 2129: " TPP - Text Presentation Program[J

line 2130: au BufNewFile,BufReadPost *.tpp^I^I^Isetf tpp[J

line 2131: [J

line 2132: " Treetop[J

line 2133: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop[J

line 2134: [J

line 2135: " Trustees[J

line 2136: au BufNewFile,BufRead trustees.conf^I^Isetf trustees[J

line 2137: [J

line 2138: " TSS - Geometry[J

line 2139: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm[J

line 2140: [J

line 2141: " TSS - Optics[J

line 2142: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop[J

line 2143: [J

line 2144: " TSS - Command Line (temporary)[J

line 2145: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl[J

line 2146: [J

line 2147: " TWIG files[J

line 2148: au BufNewFile,BufReadPost *.twig^I^Isetf twig[J

line 2149: [J

line 2150: " Motif UIT/UIL files[J

line 2151: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil[J

line 2152: [J

line 2153: " Udev conf[J

line 2154: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf[J

line 2155: [J

line 2156: " Udev permissions[J

line 2157: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm[J

line 2158: "[J

line 2159: " Udev symlinks config[J

line 2160: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh[J

line 2161: [J

line 2162: " UnrealScript[J

line 2163: au BufNewFile,BufRead *.uc^I^I^Isetf uc[J

line 2164: [J

line 2165: " Updatedb[J

line 2166: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb[J

line 2167: [J

line 2168: " Upstart (init(8)) config files[J

line 2169: au BufNewFile,BufRead */usr/share/upstart/**/*.conf             setf upstart[J

line 2170: au BufNewFile,BufRead */etc/init/*.conf,*/.init/*.conf          setf upstart[J

line 2171: au BufNewFile,BufRead */etc/init/*.override,*/.init/*.override  setf upstart[J

line 2172: [J

line 2173: " Vera[J

line 2174: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera[J

line 2175: [J

line 2176: " Verilog HDL[J

line 2177: au BufNewFile,BufRead *.v^I^I^Isetf verilog[J

line 2178: [J

line 2179: " Verilog-AMS HDL[J

line 2180: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams[J

line 2181: [J

line 2182: " VHDL[J

line 2183: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst  setf vhdl[J

line 2184: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')[J

line 2185: [J

line 2186: " Vim script[J

line 2187: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim[J

line 2188: [J

line 2189: " Viminfo file[J

line 2190: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo[J

line 2191: [J

line 2192: " Virata Config Script File or Drupal module[J

line 2198: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif[J

line 2199: [J

line 2200: " Visual Basic (also uses *.bas) or FORM[J

line 2201: au BufNewFile,BufRead *.frm^I^I^Icall s:FTVB("form")[J

line 2202: [J

line 2203: " SaxBasic is close to Visual Basic[J

line 2204: au BufNewFile,BufRead *.sba^I^I^Isetf vb[J

line 2205: [J

line 2206: " Vgrindefs file[J

line 2207: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs[J

line 2208: [J

line 2209: " VRML V1.0c[J

line 2210: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml[J

line 2211: [J

line 2212: " Webmacro[J

line 2213: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro[J

line 2214: [J

line 2215: " Wget config[J

line 2216: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget[J

line 2217: [J

line 2218: " Website MetaLanguage[J

line 2219: au BufNewFile,BufRead *.wml^I^I^Isetf wml[J

line 2220: [J

line 2221: " Winbatch[J

line 2222: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch[J

line 2223: [J

line 2224: " WSML[J

line 2225: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml[J

line 2226: [J

line 2227: " WvDial[J

line 2228: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial[J

line 2229: [J

line 2230: " CVS RC file[J

line 2231: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc[J

line 2232: [J

line 2233: " CVS commit file[J

line 2234: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs[J

line 2235: [J

line 2236: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment[J

line 2237: " lines in a WEB file).[J

line 2243: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif[J

line 2244: [J

line 2245: " Windows Scripting Host and Windows Script Component[J

line 2246: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh[J

line 2247: [J

line 2248: " XHTML[J

line 2249: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml[J

line 2250: [J

line 2251: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)[J

line 2257: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif[J

line 2258: au BufEnter *.xpm2^I^I^I^Isetf xpm2[J

line 2259: [J

line 2260: " XFree86 config[J

line 2265: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf[J

line 2268: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf[J

line 2269: [J

line 2270: " Xorg config[J

line 2271: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf[J

line 2272: [J

line 2273: " Xinetd conf[J

line 2274: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd[J

line 2275: [J

line 2276: " XS Perl extension interface language[J

line 2277: au BufNewFile,BufRead *.xs^I^I^Isetf xs[J

line 2278: [J

line 2279: " X resources file[J

line 2280: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults[J

line 2281: [J

line 2282: " Xmath[J

line 2283: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath[J

line 2285: au BufNewFile,BufRead *.ms if !s:FTnroff() | setf xmath | endif[J

line 2286: [J

line 2287: " XML  specific variants: docbk and xbl[J

line 2288: au BufNewFile,BufRead *.xml^I^I^Icall s:FTxml()[J

line 2289: [J

line 2290: func! s:FTxml()[J

line 2307: [J

line 2308: " XMI (holding UML models) is also XML[J

line 2309: au BufNewFile,BufRead *.xmi^I^I^Isetf xml[J

line 2310: [J

line 2311: " CSPROJ files are Visual Studio.NET's XML-based project config files[J

line 2312: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml[J

line 2313: [J

line 2314: " Qt Linguist translation source and Qt User Interface Files are XML[J

line 2315: au BufNewFile,BufRead *.ts,*.ui^I^I^Isetf xml[J

line 2316: [J

line 2317: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)[J

line 2318: au BufNewFile,BufRead *.tpm^I^I^Isetf xml[J

line 2319: [J

line 2320: " Xdg menus[J

line 2321: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml[J

line 2322: [J

line 2323: " ATI graphics driver configuration[J

line 2324: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml[J

line 2325: [J

line 2326: " XLIFF (XML Localisation Interchange File Format) is also XML[J

line 2327: au BufNewFile,BufRead *.xlf^I^I^Isetf xml[J

line 2328: au BufNewFile,BufRead *.xliff^I^I^Isetf xml[J

line 2329: [J

line 2330: " XML User Interface Language[J

line 2331: au BufNewFile,BufRead *.xul^I^I^Isetf xml[J

line 2332: [J

line 2333: " X11 xmodmap (also see below)[J

line 2334: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap[J

line 2335: [J

line 2336: " Xquery[J

line 2337: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery[J

line 2338: [J

line 2339: " XSD[J

line 2340: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd[J

line 2341: [J

line 2342: " Xslt[J

line 2343: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt[J

line 2344: [J

line 2345: " Yacc[J

line 2346: au BufNewFile,BufRead *.yy^I^I^Isetf yacc[J

line 2347: [J

line 2348: " Yacc or racc[J

line 2349: au BufNewFile,BufRead *.y^I^I^Icall s:FTy()[J

line 2350: [J

line 2351: func! s:FTy()[J

line 2367: [J

line 2368: [J

line 2369: " Yaml[J

line 2370: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml[J

line 2371: [J

line 2372: " yum conf (close enough to dosini)[J

line 2373: au BufNewFile,BufRead */etc/yum.conf ^I^Isetf dosini[J

line 2374: [J

line 2375: " Zimbu[J

line 2376: au BufNewFile,BufRead *.zu ^I^I^Isetf zimbu[J

line 2377: [J

line 2378: " Zope[J

line 2379: "   dtml (zope dynamic template markup language), pt (zope page template),[J

line 2380: "   cpt (zope form controller page template)[J

line 2381: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall s:FThtml()[J

line 2382: "   zsql (zope sql method)[J

line 2383: au BufNewFile,BufRead *.zsql^I^I^Icall s:SQL()[J

line 2384: [J

line 2385: " Z80 assembler asz80[J

line 2386: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a[J

line 2387: [J

line 2388: augroup END[J

line 2389: [J

line 2390: [J

line 2391: " Source the user-specified filetype file, for backwards compatibility with[J

line 2392: " Vim 5.x.[J

line 2393: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))[J

line 2394:   execute "source " . myfiletypefile[J

line 2395: endif[J

line 2396: [J

line 2397: [J

line 2398: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used[J

line 2399: " when there are no matching file name extensions.[J

line 2400: " Don't do this for compressed files.[J

line 2401: augroup filetypedetect[J

line 2404: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif[J

line 2405: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif[J

line 2406: [J

line 2407: [J

line 2408: " Extra checks for when no filetype has been detected now.  Mostly used for[J

line 2409: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim[J

line 2410: " script file.[J

line 2411: " Most of these should call s:StarSetf() to avoid names ending in .gz and the[J

line 2412: " like are used.[J

line 2413: [J

line 2414: " More Apache config files[J

line 2415: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')[J

line 2416: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')[J

line 2417: [J

line 2418: " Asterisk config file[J

line 2419: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')[J

line 2420: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')[J

line 2421: [J

line 2422: " Bazaar version control[J

line 2423: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr[J

line 2424: [J

line 2425: " BIND zone[J

line 2426: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')[J

line 2427: [J

line 2428: " Calendar[J

line 2431: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')[J

line 2432: [J

line 2433: " Changelog[J

line 2439: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif[J

line 2440: [J

line 2441: " Crontab[J

line 2442: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')[J

line 2443: [J

line 2444: " dnsmasq(8) configuration[J

line 2445: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')[J

line 2446: [J

line 2447: " Dracula[J

line 2448: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')[J

line 2449: [J

line 2450: " Fvwm[J

line 2451: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')[J

line 2453: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')[J

line 2459: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif[J

line 2460: [J

line 2461: " Gedcom[J

line 2462: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')[J

line 2463: [J

line 2464: " GTK RC[J

line 2465: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')[J

line 2466: [J

line 2467: " Jam[J

line 2468: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')[J

line 2469: [J

line 2470: " Jargon[J

line 2474: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif[J

line 2475: [J

line 2476: " Kconfig[J

line 2477: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')[J

line 2478: [J

line 2479: " Lilo: Linux loader[J

line 2480: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')[J

line 2481: [J

line 2482: " Logcheck[J

line 2483: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')[J

line 2484: [J

line 2485: " Makefile[J

line 2486: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')[J

line 2487: [J

line 2488: " Ruby Makefile[J

line 2489: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')[J

line 2490: [J

line 2491: " Mail (also matches muttrc.vim, so this is below the other checks)[J

line 2492: au BufNewFile,BufRead mutt[[:alnum:]._-]\{6\}^Isetf mail[J

line 2493: [J

line 2494: " Modconf[J

line 2498: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif[J

line 2499: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')[J

line 2500: [J

line 2501: " Mutt setup file[J

line 2502: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')[J

line 2503: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')[J

line 2504: [J

line 2505: " Nroff macros[J

line 2506: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')[J

line 2507: [J

line 2508: " Pam conf[J

line 2509: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')[J

line 2510: [J

line 2511: " Printcap and Termcap[J

line 2515: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif[J

line 2519: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif[J

line 2520: [J

line 2521: " Remind[J

line 2522: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')[J

line 2523: [J

line 2524: " Vim script[J

line 2525: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')[J

line 2526: [J

line 2527: " Subversion commit file[J

line 2528: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn[J

line 2529: [J

line 2530: " X resources file[J

line 2531: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')[J

line 2532: [J

line 2533: " XFree86 config[J

line 2535: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')[J

line 2540: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')[J

line 2541: [J

line 2542: " X11 xmodmap[J

line 2543: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')[J

line 2544: [J

line 2545: " Xinetd conf[J

line 2546: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')[J

line 2547: [J

line 2548: " yum conf (close enough to dosini)[J

line 2549: au BufNewFile,BufRead */etc/yum.repos.d/* ^Icall s:StarSetf('dosini')[J

line 2550: [J

line 2551: " Z-Shell script[J

line 2552: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')[J

line 2553: [J

line 2554: [J

line 2555: " Plain text files, needs to be far down to not override others.  This avoids[J

line 2556: " the "conf" type being used if there is a line starting with '#'.[J

line 2557: au BufNewFile,BufRead *.txt,*.text^I^Isetf text[J

line 2558: [J

line 2559: [J

line 2560: " Use the filetype detect plugins.  They may overrule any of the previously[J

line 2561: " detected filetypes.[J

line 2562: runtime! ftdetect/*.vim[J

Searching for "ftdetect/*.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/ftdetect/*.vim"[J
Searching for "/var/lib/vim/addons/ftdetect/*.vim"[J
Searching for "/usr/share/vim/vimfiles/ftdetect/*.vim"[J
Searching for "/usr/share/vim/vim73/ftdetect/*.vim"[J
Searching for "/usr/share/vim/vimfiles/after/ftdetect/*.vim"[J
Searching for "/var/lib/vim/addons/after/ftdetect/*.vim"[J
Searching for "/home/miph/.vim/after/ftdetect/*.vim"[J
not found in 'runtimepath': "ftdetect/*.vim"[J
line 2563: [J

line 2564: " NOTE: The above command could have ended the filetypedetect autocmd group[J

line 2565: " and started another one. Let's make sure it has ended to get to a consistent[J

line 2566: " state.[J

line 2567: augroup END[J

line 2568: [J

line 2569: " Generic configuration file (check this last, it's just guessing!)[J

line 2575: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf conf | endif[J

line 2576: [J

line 2577: [J

line 2578: " If the GUI is already running, may still need to install the Syntax menu.[J

line 2579: " Don't do it when the 'M' flag is included in 'guioptions'.[J

line 2581: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"[J

line 2582:   source <sfile>:p:h/menu.vim[J

line 2583: endif[J

line 2584: [J

line 2585: " Function called for testing all functions defined here.  These are[J

line 2586: " script-local, thus need to be executed here.[J

line 2587: " Returns a string with error messages (hopefully empty).[J

line 2588: func! TestFiletypeFuncs(testlist)[J

line 2599: [J

line 2600: " Restore 'cpoptions'[J

line 2601: let &cpo = s:cpo_save[J

line 2602: unlet s:cpo_save[J

finished sourcing /usr/share/vim/vim73/filetype.vim[J
continuing in /usr/share/vim/vim73/syntax/syntax.vim[J
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"[J
Searching for "/var/lib/vim/addons/after/filetype.vim"[J
Searching for "/home/miph/.vim/after/filetype.vim"[J
line 26:   let s:did_ft = 0[J

line 27: endif[J

line 28: [J

line 29: " Set up the connection between FileType and Syntax autocommands.[J

line 30: " This makes the syntax automatically set when the file type is detected.[J

line 31: augroup syntaxset[J

line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")[J

line 33: augroup END[J

line 34: [J

line 35: [J

line 36: " Execute the syntax autocommands for the each buffer.[J

line 37: " If the filetype wasn't detected yet, do that now.[J

line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'[J

line 39: " already was set manually (e.g., help buffers).[J

line 40: doautoall syntaxset FileType[J

line 41: if !s:did_ft[J

line 42:   doautoall filetypedetect BufRead[J

line 43: endif[J

finished sourcing /usr/share/vim/vim73/syntax/syntax.vim[J
continuing in /usr/share/vim/vimrc[J
line 22: endif[J

line 23: [J

line 24: " If using a dark background within the editing area and syntax highlighting[J

line 25: " turn on this option as well[J

line 26: "set background=dark[J

line 27: [J

line 28: " Uncomment the following to have Vim jump to the last position when[J

line 29: " reopening a file[J

line 30: "if has("autocmd")[J

line 31: "  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif[J

line 32: "endif[J

line 33: [J

line 34: " Uncomment the following to have Vim load indentation rules and plugins[J

line 35: " according to the detected filetype.[J

line 36: "if has("autocmd")[J

line 37: "  filetype plugin indent on[J

line 38: "endif[J

line 39: [J

line 40: " The following are commented out as they cause vim to behave a lot[J

line 41: " differently from regular Vi. They are highly recommended though.[J

line 42: "set showcmd^I^I" Show (partial) command in status line.[J

line 43: "set showmatch^I^I" Show matching brackets.[J

line 44: "set ignorecase^I^I" Do case insensitive matching[J

line 45: "set smartcase^I^I" Do smart case matching[J

line 46: "set incsearch^I^I" Incremental search[J

line 47: "set autowrite^I^I" Automatically save before commands like :next and :make[J

line 48: "set hidden             " Hide buffers when they are abandoned[J

line 49: "set mouse=a^I^I" Enable mouse usage (all modes)[J

line 50: [J

line 51: " Source a global configuration file if available[J

line 52: if filereadable("/etc/vim/vimrc.local")[J

line 53:   source /etc/vim/vimrc.local[J

line 54: endif[J

line 55: [J

finished sourcing $VIM/vimrc[J
chdir(/home/miph)[J
fchdir() to previous dir[J
sourcing "$HOME/.vimrc"[J
line 1: set nocompatible[J

line 2: [J

line 3: filetype on[J

Searching for "filetype.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/filetype.vim"[J
Searching for "/var/lib/vim/addons/filetype.vim"[J
Searching for "/usr/share/vim/vimfiles/filetype.vim"[J
Searching for "/usr/share/vim/vim73/filetype.vim"[J
chdir(/usr/share/vim/vim73)[J
fchdir() to previous dir[J
line 3: sourcing "/usr/share/vim/vim73/filetype.vim"[J
line 1: " Vim support file to detect file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last Change:^I2012 May 18[J

line 5: [J

line 6: " Listen very carefully, I will say this only once[J

line 7: if exists("did_load_filetypes")[J

line 8:   finish[J

finished sourcing /usr/share/vim/vim73/filetype.vim[J
continuing in /home/miph/.vimrc[J
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"[J
Searching for "/var/lib/vim/addons/after/filetype.vim"[J
Searching for "/home/miph/.vim/after/filetype.vim"[J
line 4: filetype plugin on[J

Searching for "filetype.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/filetype.vim"[J
Searching for "/var/lib/vim/addons/filetype.vim"[J
Searching for "/usr/share/vim/vimfiles/filetype.vim"[J
Searching for "/usr/share/vim/vim73/filetype.vim"[J
chdir(/usr/share/vim/vim73)[J
fchdir() to previous dir[J
line 4: sourcing "/usr/share/vim/vim73/filetype.vim"[J
line 1: " Vim support file to detect file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last Change:^I2012 May 18[J

line 5: [J

line 6: " Listen very carefully, I will say this only once[J

line 7: if exists("did_load_filetypes")[J

line 8:   finish[J

finished sourcing /usr/share/vim/vim73/filetype.vim[J
continuing in /home/miph/.vimrc[J
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"[J
Searching for "/var/lib/vim/addons/after/filetype.vim"[J
Searching for "/home/miph/.vim/after/filetype.vim"[J
Searching for "ftplugin.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/ftplugin.vim"[J
Searching for "/var/lib/vim/addons/ftplugin.vim"[J
Searching for "/usr/share/vim/vimfiles/ftplugin.vim"[J
Searching for "/usr/share/vim/vim73/ftplugin.vim"[J
chdir(/usr/share/vim/vim73)[J
fchdir() to previous dir[J
line 4: sourcing "/usr/share/vim/vim73/ftplugin.vim"[J
line 1: " Vim support file to switch on loading plugins for file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last change:^I2006 Apr 30[J

line 5: [J

line 6: if exists("did_load_ftplugin")[J

line 7:   finish[J

line 8: endif[J

line 9: let did_load_ftplugin = 1[J

line 10: [J

line 11: augroup filetypeplugin[J

line 12:   au FileType * call s:LoadFTPlugin()[J

line 13: [J

line 14:   func! s:LoadFTPlugin()[J

line 35: augroup END[J

finished sourcing /usr/share/vim/vim73/ftplugin.vim[J
continuing in /home/miph/.vimrc[J
Searching for "/usr/share/vim/vimfiles/after/ftplugin.vim"[J
Searching for "/var/lib/vim/addons/after/ftplugin.vim"[J
Searching for "/home/miph/.vim/after/ftplugin.vim"[J
line 5: [J

line 6: set tabstop=4[J

line 7: set shiftwidth=4[J

line 8: set smarttab[J

line 9: set expandtab[J

line 10: set softtabstop=4[J

line 11: [J

line 12: set autoindent[J

line 13: [J

line 14: let python_highlight_all = 1[J

line 15: [J

line 16: set t_Co=256[J

Searching for "syntax/syncolor.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vim73/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 16: sourcing "/usr/share/vim/vim73/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 44: hi Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 45: hi Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 46: hi Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 47: hi Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 48: hi Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 49: hi PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 50: hi Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 51: hi Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 52: hi Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/share/vim/vim73/syntax/syncolor.vim[J
continuing in /home/miph/.vimrc[J
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"[J
Searching for "/home/miph/.vim/after/syntax/syncolor.vim"[J
line 17: [J

line 18: autocmd FileType python set omnifunc=pythoncomplete#Complete[J

line 19: autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS[J

line 20: autocmd FileType html set omnifunc=htmlcomplete#CompleteTags[J

line 21: autocmd FileType css set omnifunc=csscomplete#CompleteCSS[J

line 22: [J

line 23: function InsertTabWrapper()[J

line 31: [J

line 32: imap  <c-r>=InsertTabWrapper()[J

No mapping found[J
line 33: set complete=""[J

line 34: set complete+=.[J

line 35: set complete+=k[J

line 36: set complete+=b[J

line 37: set complete+=t[J

line 38: [J

line 39: autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``[J

line 40: [J

line 41: autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class[J

line 42: [J

line 43: let g:snippetsEmu_key = "<C-j>"[J

line 44: [J

line 45: "vmap <C-C> "+yi[J

line 46: "imap <C-V> "+gPi[J

line 47: [J

line 48: colorscheme desert[J

Searching for "colors/desert.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/colors/desert.vim"[J
Searching for "/var/lib/vim/addons/colors/desert.vim"[J
Searching for "/usr/share/vim/vimfiles/colors/desert.vim"[J
Searching for "/usr/share/vim/vim73/colors/desert.vim"[J
chdir(/usr/share/vim/vim73/colors)[J
fchdir() to previous dir[J
line 48: sourcing "/usr/share/vim/vim73/colors/desert.vim"[J
line 1: " Vim color file[J

line 2: " Maintainer:^IHans Fugal <hans@fugal.net>[J

line 3: " Last Change:^I$Date: 2004/06/13 19:30:30 $[J

line 4: " Last Change:^I$Date: 2004/06/13 19:30:30 $[J

line 5: " URL:^I^Ihttp://hans.fugal.net/vim/colors/desert.vim[J

line 6: " Version:^I$Id: desert.vim,v 1.1 2004/06/13 19:30:30 vimboss Exp $[J

line 7: [J

line 8: " cool help screens[J

line 9: " :he group-name[J

line 10: " :he highlight-groups[J

line 11: " :he cterm-colors[J

line 12: [J

line 13: set background=dark[J

Searching for "syntax/syncolor.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vim73/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 13: sourcing "/usr/share/vim/vim73/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/share/vim/vim73/syntax/syncolor.vim[J
continuing in /usr/share/vim/vim73/colors/desert.vim[J
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"[J
Searching for "/home/miph/.vim/after/syntax/syncolor.vim"[J
line 14: if version > 580[J

line 15:     " no guarantees for version 5.8 and below, but this makes it stop[J

line 16:     " complaining[J

line 17:     hi clear[J

Searching for "syntax/syncolor.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vim73/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 17: sourcing "/usr/share/vim/vim73/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/share/vim/vim73/syntax/syncolor.vim[J
continuing in /usr/share/vim/vim73/colors/desert.vim[J
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"[J
Searching for "/home/miph/.vim/after/syntax/syncolor.vim"[J
line 18:     if exists("syntax_on")[J

line 19: ^Isyntax reset[J

line 19: runtime! syntax/syncolor.vim[J

Searching for "syntax/syncolor.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vim73/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 19: sourcing "/usr/share/vim/vim73/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi! link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi! link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi! link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi! link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi! link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi! link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi! link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi! link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi! link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi! link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi! link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi! link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi! link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi! link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi! link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi! link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi! link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi! link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi! link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi! link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi! link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi! link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi! link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi! link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/share/vim/vim73/syntax/syncolor.vim[J
continuing in /usr/share/vim/vim73/colors/desert.vim[J
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"[J
Searching for "/home/miph/.vim/after/syntax/syncolor.vim"[J
line 20:     endif[J

line 21: endif[J

line 22: let g:colors_name="desert"[J

line 23: [J

line 24: hi Normal^Iguifg=White guibg=grey20[J

line 25: [J

line 26: " highlight groups[J

line 27: hi Cursor^Iguibg=khaki guifg=slategrey[J

line 28: "hi CursorIM[J

line 29: "hi Directory[J

line 30: "hi DiffAdd[J

line 31: "hi DiffChange[J

line 32: "hi DiffDelete[J

line 33: "hi DiffText[J

line 34: "hi ErrorMsg[J

line 35: hi VertSplit^Iguibg=#c2bfa5 guifg=grey50 gui=none[J

line 36: hi Folded^Iguibg=grey30 guifg=gold[J

line 37: hi FoldColumn^Iguibg=grey30 guifg=tan[J

line 38: hi IncSearch^Iguifg=slategrey guibg=khaki[J

line 39: "hi LineNr[J

line 40: hi ModeMsg^Iguifg=goldenrod[J

line 41: hi MoreMsg^Iguifg=SeaGreen[J

line 42: hi NonText^Iguifg=LightBlue guibg=grey30[J

line 43: hi Question^Iguifg=springgreen[J

line 44: hi Search^Iguibg=peru guifg=wheat[J

line 45: hi SpecialKey^Iguifg=yellowgreen[J

line 46: hi StatusLine^Iguibg=#c2bfa5 guifg=black gui=none[J

line 47: hi StatusLineNC^Iguibg=#c2bfa5 guifg=grey50 gui=none[J

line 48: hi Title^Iguifg=indianred[J

line 49: hi Visual^Igui=none guifg=khaki guibg=olivedrab[J

line 50: "hi VisualNOS[J

line 51: hi WarningMsg^Iguifg=salmon[J

line 52: "hi WildMenu[J

line 53: "hi Menu[J

line 54: "hi Scrollbar[J

line 55: "hi Tooltip[J

line 56: [J

line 57: " syntax highlighting groups[J

line 58: hi Comment^Iguifg=SkyBlue[J

line 59: hi Constant^Iguifg=#ffa0a0[J

line 60: hi Identifier^Iguifg=palegreen[J

line 61: hi Statement^Iguifg=khaki[J

line 62: hi PreProc^Iguifg=indianred[J

line 63: hi Type^I^Iguifg=darkkhaki[J

line 64: hi Special^Iguifg=navajowhite[J

line 65: "hi Underlined[J

line 66: hi Ignore^Iguifg=grey40[J

line 67: "hi Error[J

line 68: hi Todo^I^Iguifg=orangered guibg=yellow2[J

line 69: [J

line 70: " color terminal definitions[J

line 71: hi SpecialKey^Ictermfg=darkgreen[J

line 72: hi NonText^Icterm=bold ctermfg=darkblue[J

line 73: hi Directory^Ictermfg=darkcyan[J

line 74: hi ErrorMsg^Icterm=bold ctermfg=7 ctermbg=1[J

line 75: hi IncSearch^Icterm=NONE ctermfg=yellow ctermbg=green[J

line 76: hi Search^Icterm=NONE ctermfg=grey ctermbg=blue[J

line 77: hi MoreMsg^Ictermfg=darkgreen[J

line 78: hi ModeMsg^Icterm=NONE ctermfg=brown[J

line 79: hi LineNr^Ictermfg=3[J

line 80: hi Question^Ictermfg=green[J

line 81: hi StatusLine^Icterm=bold,reverse[J

line 82: hi StatusLineNC cterm=reverse[J

line 83: hi VertSplit^Icterm=reverse[J

line 84: hi Title^Ictermfg=5[J

line 85: hi Visual^Icterm=reverse[J

line 86: hi VisualNOS^Icterm=bold,underline[J

line 87: hi WarningMsg^Ictermfg=1[J

line 88: hi WildMenu^Ictermfg=0 ctermbg=3[J

line 89: hi Folded^Ictermfg=darkgrey ctermbg=NONE[J

line 90: hi FoldColumn^Ictermfg=darkgrey ctermbg=NONE[J

line 91: hi DiffAdd^Ictermbg=4[J

line 92: hi DiffChange^Ictermbg=5[J

line 93: hi DiffDelete^Icterm=bold ctermfg=4 ctermbg=6[J

line 94: hi DiffText^Icterm=bold ctermbg=1[J

line 95: hi Comment^Ictermfg=darkcyan[J

line 96: hi Constant^Ictermfg=brown[J

line 97: hi Special^Ictermfg=5[J

line 98: hi Identifier^Ictermfg=6[J

line 99: hi Statement^Ictermfg=3[J

line 100: hi PreProc^Ictermfg=5[J

line 101: hi Type^I^Ictermfg=2[J

line 102: hi Underlined^Icterm=underline ctermfg=5[J

line 103: hi Ignore^Icterm=bold ctermfg=7[J

line 104: hi Ignore^Ictermfg=darkgrey[J

line 105: hi Error^Icterm=bold ctermfg=7 ctermbg=1[J

line 106: [J

line 107: [J

line 108: "vim: sw=4[J

finished sourcing /usr/share/vim/vim73/colors/desert.vim[J
continuing in /home/miph/.vimrc[J
line 49: syntax on[J

line 49: so $VIMRUNTIME/syntax/syntax.vim[J

chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 49: sourcing "/usr/share/vim/vim73/syntax/syntax.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 04[J

line 4: [J

line 5: " This file is used for ":syntax on".[J

line 6: " It installs the autocommands and starts highlighting for all buffers.[J

line 7: [J

line 8: if !has("syntax")[J

line 9:   finish[J

line 10: endif[J

line 11: [J

line 12: " If Syntax highlighting appears to be on already, turn it off first, so that[J

line 13: " any leftovers are cleared.[J

line 14: if exists("syntax_on") || exists("syntax_manual")[J

line 15:   so <sfile>:p:h/nosyntax.vim[J

chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 15: sourcing "/usr/share/vim/vim73/syntax/nosyntax.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2006 Apr 16[J

line 4: [J

line 5: " This file is used for ":syntax off".[J

line 6: " It removes the autocommands and stops highlighting for all buffers.[J

line 7: [J

line 8: if !has("syntax")[J

line 9:   finish[J

line 10: endif[J

line 11: [J

line 12: " Remove all autocommands for the Syntax event.  This also avoids that[J

line 13: " "syntax=foo" in a modeline triggers the SynSet() function of synload.vim.[J

line 14: au! Syntax[J

line 15: [J

line 16: " remove all syntax autocommands and remove the syntax for each buffer[J

line 17: augroup syntaxset[J

line 18:   au![J

line 19:   au BufEnter * syn clear[J

line 20:   au BufEnter * if exists("b:current_syntax") | unlet b:current_syntax | endif[J

line 21:   doautoall syntaxset BufEnter *[J

line 22:   au![J

line 23: augroup END[J

line 24: [J

line 25: if exists("syntax_on")[J

line 26:   unlet syntax_on[J

line 27: endif[J

line 28: if exists("syntax_manual")[J

line 29:   unlet syntax_manual[J

line 30: endif[J

finished sourcing /usr/share/vim/vim73/syntax/nosyntax.vim[J
continuing in /usr/share/vim/vim73/syntax/syntax.vim[J
line 16: endif[J

line 17: [J

line 18: " Load the Syntax autocommands and set the default methods for highlighting.[J

line 19: runtime syntax/synload.vim[J

Searching for "syntax/synload.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/syntax/synload.vim"[J
Searching for "/var/lib/vim/addons/syntax/synload.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/synload.vim"[J
Searching for "/usr/share/vim/vim73/syntax/synload.vim"[J
chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 19: sourcing "/usr/share/vim/vim73/syntax/synload.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2012 Feb 11[J

line 4: [J

line 5: " This file sets up for syntax highlighting.[J

line 6: " It is loaded from "syntax.vim" and "manual.vim".[J

line 7: " 1. Set the default highlight groups.[J

line 8: " 2. Install Syntax autocommands for all the available syntax files.[J

line 9: [J

line 10: if !has("syntax")[J

line 11:   finish[J

line 12: endif[J

line 13: [J

line 14: " let others know that syntax has been switched on[J

line 15: let syntax_on = 1[J

line 16: [J

line 17: " Set the default highlighting colors.  Use a color scheme if specified.[J

line 18: if exists("colors_name")[J

line 19:   exe "colors " . colors_name[J

line 19: colors desert[J

Searching for "colors/desert.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/colors/desert.vim"[J
Searching for "/var/lib/vim/addons/colors/desert.vim"[J
Searching for "/usr/share/vim/vimfiles/colors/desert.vim"[J
Searching for "/usr/share/vim/vim73/colors/desert.vim"[J
chdir(/usr/share/vim/vim73/colors)[J
fchdir() to previous dir[J
line 19: sourcing "/usr/share/vim/vim73/colors/desert.vim"[J
line 1: " Vim color file[J

line 2: " Maintainer:^IHans Fugal <hans@fugal.net>[J

line 3: " Last Change:^I$Date: 2004/06/13 19:30:30 $[J

line 4: " Last Change:^I$Date: 2004/06/13 19:30:30 $[J

line 5: " URL:^I^Ihttp://hans.fugal.net/vim/colors/desert.vim[J

line 6: " Version:^I$Id: desert.vim,v 1.1 2004/06/13 19:30:30 vimboss Exp $[J

line 7: [J

line 8: " cool help screens[J

line 9: " :he group-name[J

line 10: " :he highlight-groups[J

line 11: " :he cterm-colors[J

line 12: [J

line 13: set background=dark[J

line 14: if version > 580[J

line 15:     " no guarantees for version 5.8 and below, but this makes it stop[J

line 16:     " complaining[J

line 17:     hi clear[J

Searching for "syntax/syncolor.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vim73/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 17: sourcing "/usr/share/vim/vim73/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/share/vim/vim73/syntax/syncolor.vim[J
continuing in /usr/share/vim/vim73/colors/desert.vim[J
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"[J
Searching for "/home/miph/.vim/after/syntax/syncolor.vim"[J
line 18:     if exists("syntax_on")[J

line 19: ^Isyntax reset[J

line 19: runtime! syntax/syncolor.vim[J

Searching for "syntax/syncolor.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/share/vim/vim73/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim73/syntax)[J
fchdir() to previous dir[J
line 19: sourcing "/usr/share/vim/vim73/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi! link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi! link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi! link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi! link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi! link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi! link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi! link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi! link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi! link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi! link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi! link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi! link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi! link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi! link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi! link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi! link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi! link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi! link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi! link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi! link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi! link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi! link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi! link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi! link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/share/vim/vim73/syntax/syncolor.vim[J
continuing in /usr/share/vim/vim73/colors/desert.vim[J
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"[J
Searching for "/home/miph/.vim/after/syntax/syncolor.vim"[J
line 20:     endif[J

line 21: endif[J

line 22: let g:colors_name="desert"[J

line 23: [J

line 24: hi Normal^Iguifg=White guibg=grey20[J

line 25: [J

line 26: " highlight groups[J

line 27: hi Cursor^Iguibg=khaki guifg=slategrey[J

line 28: "hi CursorIM[J

line 29: "hi Directory[J

line 30: "hi DiffAdd[J

line 31: "hi DiffChange[J

line 32: "hi DiffDelete[J

line 33: "hi DiffText[J

line 34: "hi ErrorMsg[J

line 35: hi VertSplit^Iguibg=#c2bfa5 guifg=grey50 gui=none[J

line 36: hi Folded^Iguibg=grey30 guifg=gold[J

line 37: hi FoldColumn^Iguibg=grey30 guifg=tan[J

line 38: hi IncSearch^Iguifg=slategrey guibg=khaki[J

line 39: "hi LineNr[J

line 40: hi ModeMsg^Iguifg=goldenrod[J

line 41: hi MoreMsg^Iguifg=SeaGreen[J

line 42: hi NonText^Iguifg=LightBlue guibg=grey30[J

line 43: hi Question^Iguifg=springgreen[J

line 44: hi Search^Iguibg=peru guifg=wheat[J

line 45: hi SpecialKey^Iguifg=yellowgreen[J

line 46: hi StatusLine^Iguibg=#c2bfa5 guifg=black gui=none[J

line 47: hi StatusLineNC^Iguibg=#c2bfa5 guifg=grey50 gui=none[J

line 48: hi Title^Iguifg=indianred[J

line 49: hi Visual^Igui=none guifg=khaki guibg=olivedrab[J

line 50: "hi VisualNOS[J

line 51: hi WarningMsg^Iguifg=salmon[J

line 52: "hi WildMenu[J

line 53: "hi Menu[J

line 54: "hi Scrollbar[J

line 55: "hi Tooltip[J

line 56: [J

line 57: " syntax highlighting groups[J

line 58: hi Comment^Iguifg=SkyBlue[J

line 59: hi Constant^Iguifg=#ffa0a0[J

line 60: hi Identifier^Iguifg=palegreen[J

line 61: hi Statement^Iguifg=khaki[J

line 62: hi PreProc^Iguifg=indianred[J

line 63: hi Type^I^Iguifg=darkkhaki[J

line 64: hi Special^Iguifg=navajowhite[J

line 65: "hi Underlined[J

line 66: hi Ignore^Iguifg=grey40[J

line 67: "hi Error[J

line 68: hi Todo^I^Iguifg=orangered guibg=yellow2[J

line 69: [J

line 70: " color terminal definitions[J

line 71: hi SpecialKey^Ictermfg=darkgreen[J

line 72: hi NonText^Icterm=bold ctermfg=darkblue[J

line 73: hi Directory^Ictermfg=darkcyan[J

line 74: hi ErrorMsg^Icterm=bold ctermfg=7 ctermbg=1[J

line 75: hi IncSearch^Icterm=NONE ctermfg=yellow ctermbg=green[J

line 76: hi Search^Icterm=NONE ctermfg=grey ctermbg=blue[J

line 77: hi MoreMsg^Ictermfg=darkgreen[J

line 78: hi ModeMsg^Icterm=NONE ctermfg=brown[J

line 79: hi LineNr^Ictermfg=3[J

line 80: hi Question^Ictermfg=green[J

line 81: hi StatusLine^Icterm=bold,reverse[J

line 82: hi StatusLineNC cterm=reverse[J

line 83: hi VertSplit^Icterm=reverse[J

line 84: hi Title^Ictermfg=5[J

line 85: hi Visual^Icterm=reverse[J

line 86: hi VisualNOS^Icterm=bold,underline[J

line 87: hi WarningMsg^Ictermfg=1[J

line 88: hi WildMenu^Ictermfg=0 ctermbg=3[J

line 89: hi Folded^Ictermfg=darkgrey ctermbg=NONE[J

line 90: hi FoldColumn^Ictermfg=darkgrey ctermbg=NONE[J

line 91: hi DiffAdd^Ictermbg=4[J

line 92: hi DiffChange^Ictermbg=5[J

line 93: hi DiffDelete^Icterm=bold ctermfg=4 ctermbg=6[J

line 94: hi DiffText^Icterm=bold ctermbg=1[J

line 95: hi Comment^Ictermfg=darkcyan[J

line 96: hi Constant^Ictermfg=brown[J

line 97: hi Special^Ictermfg=5[J

line 98: hi Identifier^Ictermfg=6[J

line 99: hi Statement^Ictermfg=3[J

line 100: hi PreProc^Ictermfg=5[J

line 101: hi Type^I^Ictermfg=2[J

line 102: hi Underlined^Icterm=underline ctermfg=5[J

line 103: hi Ignore^Icterm=bold ctermfg=7[J

line 104: hi Ignore^Ictermfg=darkgrey[J

line 105: hi Error^Icterm=bold ctermfg=7 ctermbg=1[J

line 106: [J

line 107: [J

line 108: "vim: sw=4[J

finished sourcing /usr/share/vim/vim73/colors/desert.vim[J
continuing in /usr/share/vim/vim73/syntax/synload.vim[J
line 20: else[J

line 21:   runtime! syntax/syncolor.vim[J

line 22: endif[J

line 23: [J

line 24: " Line continuation is used here, remove 'C' from 'cpoptions'[J

line 25: let s:cpo_save = &cpo[J

line 26: set cpo&vim[J

line 27: [J

line 28: " First remove all old syntax autocommands.[J

line 29: au! Syntax[J

line 30: [J

line 31: au Syntax *^I^Icall s:SynSet()[J

line 32: [J

line 33: fun! s:SynSet()[J

line 59: [J

line 60: [J

line 61: " Handle adding doxygen to other languages (C, C++, C#, IDL)[J

line 66: au Syntax c,cpp,cs,idl,php if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif[J

line 67: [J

line 68: [J

line 69: " Source the user-specified syntax highlighting file[J

line 70: if exists("mysyntaxfile") && filereadable(expand(mysyntaxfile))[J

line 71:   execute "source " . mysyntaxfile[J

line 72: endif[J

line 73: [J

line 74: " Restore 'cpoptions'[J

line 75: let &cpo = s:cpo_save[J

line 76: unlet s:cpo_save[J

finished sourcing /usr/share/vim/vim73/syntax/synload.vim[J
continuing in /usr/share/vim/vim73/syntax/syntax.vim[J
line 20: [J

line 21: " Load the FileType autocommands if not done yet.[J

line 22: if exists("did_load_filetypes")[J

line 23:   let s:did_ft = 1[J

line 24: else[J

line 25:   filetype on[J

line 26:   let s:did_ft = 0[J

line 27: endif[J

line 28: [J

line 29: " Set up the connection between FileType and Syntax autocommands.[J

line 30: " This makes the syntax automatically set when the file type is detected.[J

line 31: augroup syntaxset[J

line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")[J

line 33: augroup END[J

line 34: [J

line 35: [J

line 36: " Execute the syntax autocommands for the each buffer.[J

line 37: " If the filetype wasn't detected yet, do that now.[J

line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'[J

line 39: " already was set manually (e.g., help buffers).[J

line 40: doautoall syntaxset FileType[J

line 41: if !s:did_ft[J

line 42:   doautoall filetypedetect BufRead[J

line 43: endif[J

finished sourcing /usr/share/vim/vim73/syntax/syntax.vim[J
continuing in /home/miph/.vimrc[J
line 50: [J

line 51: "set nu[J

line 52: set mouse=a[J

line 53: [J

line 54: set termencoding=utf-8[J

line 55: "set novisualbell[J

line 56: [J

line 57: set t_vb=[J

line 58: [J

line 59: set backspace=indent,eol,start whichwrap+=<,>,[,][J

line 60: [J

line 61: set showtabline=0[J

line 62: [J

line 63: set wrap[J

line 64: set linebreak[J

line 65: [J

line 66: set nobackup[J

line 67: set noswapfile[J

line 68: set encoding=utf-8[J

line 69: set fileencodings=utf8,cp1251[J

line 70: set guioptions-=T[J

line 71: set guioptions-=r[J

line 72: [J

line 73: " CTRL-Tab is Next tab[J

line 74: nnoremap <C-Tab> :tabnext<CR>[J

line 75: " CTRL-Shift-Tab is Previous tab[J

line 76: nnoremap <C-S-Tab> :tabprevious<CR>[J

line 77: " use Alt-Left and Alt-Right to move current tab to left or right[J

line 78: nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>[J

line 79: nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . tabpagenr()<CR>[J

line 80: " CTRL-F4 is :tabclose[J

line 81: nnoremap <C-F4> :tabclose<CR>[J

line 82: set showtabline=2[J

line 83: " Tab is Next window[J

line 84: nnoremap <Tab> <C-W>w[J

line 85: " Shift-Tab is Previous window[J

line 86:  nnoremap <S-Tab> <C-W>W[J

finished sourcing $HOME/.vimrc[J
Searching for "plugin/**/*.vim" in "/home/miph/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/miph/.vim/after"[J
Searching for "/home/miph/.vim/plugin/**/*.vim"[J
chdir(/home/miph/.vim/plugin)[J
fchdir() to previous dir[J
sourcing "/home/miph/.vim/plugin/vimballPlugin.vim"[J
line 1: " vimballPlugin : construct a file containing both paths and files[J

line 2: " Author: Charles E. Campbell, Jr.[J

line 3: " Copyright: (c) 2004-2010 by Charles E. Campbell, Jr.[J

line 4: "            The VIM LICENSE applies to Vimball.vim, and Vimball.txt[J

line 5: "            (see |copyright|) except use "Vimball" instead of "Vim".[J

line 6: "            No warranty, express or implied.[J

line 7: "  *** ***   Use At-Your-Own-Risk!   *** ***[J

line 8: "[J

line 9: " (Rom 2:1 WEB) Therefore you are without excuse, O man, whoever you are who[J

line 10: "      judge. For in that which you judge another, you condemn yourself. For[J

line 11: "      you who judge practice the same things.[J

line 12: " GetLatestVimScripts: 1502 1 :AutoInstall: vimball.vim[J

line 13: [J

line 14: " ---------------------------------------------------------------------[J

line 15: "  Load Once: {{{1[J

line 16: if &cp || exists("g:loaded_vimballPlugin")[J

line 17:  finish[J

line 18: endif[J

line 19: let g:loaded_vimballPlugin = "v33"[J

line 20: let s:keepcpo              = &cpo[J

line 21: set cpo&vim[J

line 22: [J

line 23: " ------------------------------------------------------------------------------[J

line 24: " Public Interface: {{{1[J

line 25: com! -ra   -complete=file -na=+ -bang MkVimball^I^I^I^Icall vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)[J

line 26: com! -na=? -complete=dir  UseVimball^I^I^I^I^I^Icall vimball#Vimball(1,<f-args>)[J

line 27: com! -na=0                VimballList^I^I^I^I^I^Icall vimball#Vimball(0)[J

line 28: com! -na=* -complete=dir  RmVimball^I^I^I^I^I^I^Icall vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()[J

line 29: au BufEnter  *.vba,*.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")[J

line 30: au SourceCmd *.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if expand("%")!=expand("<afile>")|close|endif[J

line 31: au SourceCmd *.vba^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif[J

line 32: au BufEnter  *.vmb,*.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")[J

line 33: au SourceCmd *.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if expand("%")!=expand("<afile>")|close|endif[J

line 34: au SourceCmd *.vmb^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif[J

line 35: [J

line 36: " =====================================================================[J

line 37: " Restoration And Modelines: {{{1[J

line 38: " vim: fdm=marker[J

line 39: let &cpo= s:keepcpo[J

line 40: unlet s:keepcpo[J

finished sourcing /home/miph/.vim/plugin/vimballPlugin.vim[J
Searching for "/var/lib/vim/addons/plugin/**/*.vim"[J
Searching for "/usr/share/vim/vimfiles/plugin/**/*.vim"[J
Searching for "/usr/share/vim/vim73/plugin/**/*.vim"[J
chdir(/usr/share/vim/vim73/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim73/plugin/getscriptPlugin.vim"[J
line 1: " ---------------------------------------------------------------------[J

line 2: " getscriptPlugin.vim[J

line 3: "  Author:^ICharles E. Campbell, Jr.[J

line 4: "  Date:^IJan 07, 2008[J

line 5: "  Installing:^I:help glvs-install[J

line 6: "  Usage:^I:help glvs[J

line 7: "[J

line 8: " GetLatestVimScripts: 642 1 :AutoInstall: getscript.vim[J

line 9: "[J

line 10: " (Rom 15:11 WEB) Again, "Praise the Lord, all you Gentiles!  Let[J

line 11: " all the peoples praise Him."[J

line 12: " ---------------------------------------------------------------------[J

line 13: " Initialization:^I{{{1[J

line 14: " if you're sourcing this file, surely you can't be[J

line 15: " expecting vim to be in its vi-compatible mode[J

line 16: if &cp || exists("g:loaded_getscriptPlugin")[J

line 17:  if &verbose[J

line 18:   echo "GetLatestVimScripts is not vi-compatible; not loaded (you need to set nocp)"[J

line 19:  endif[J

line 20:  finish[J

line 21: endif[J

line 22: let g:loaded_getscriptPlugin = "v34"[J

line 23: let s:keepcpo                = &cpo[J

line 24: set cpo&vim[J

line 25: [J

line 26: " ---------------------------------------------------------------------[J

line 27: "  Public Interface: {{{1[J

line 28: com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()[J

line 29: com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()[J

line 30: silent! com -nargs=0 GLVS                call getscript#GetLatestVimScripts()[J

line 31: [J

line 32: " ---------------------------------------------------------------------[J

line 33: " Restore Options: {{{1[J

line 34: let &cpo= s:keepcpo[J

line 35: unlet s:keepcpo[J

line 36: [J

line 37: " ---------------------------------------------------------------------[J

line 38: " vim: ts=8 sts=2 fdm=marker nowrap[J

finished sourcing /usr/share/vim/vim73/plugin/getscriptPlugin.vim[J
chdir(/usr/share/vim/vim73/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim73/plugin/gzip.vim"[J
line 1: " Vim plugin for editing compressed files.[J

line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>[J

line 3: " Last Change: 2010 Mar 10[J

line 4: [J

line 5: " Exit quickly when:[J

line 6: " - this plugin was already loaded[J

line 7: " - when 'compatible' is set[J

line 8: " - some autocommands are already taking care of compressed files[J

line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")[J

line 10:   finish[J

line 11: endif[J

line 12: let loaded_gzip = 1[J

line 13: [J

line 14: augroup gzip[J

line 15:   " Remove all gzip autocommands[J

line 16:   au![J

line 17: [J

line 18:   " Enable editing of gzipped files.[J

line 19:   " The functions are defined in autoload/gzip.vim.[J

line 20:   "[J

line 21:   " Set binary mode before reading the file.[J

line 22:   " Use "gzip -d", gunzip isn't always available.[J

line 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz setlocal bin[J

line 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")[J

line 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")[J

line 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")[J

line 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")[J

line 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")[J

line 29:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")[J

line 30:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")[J

line 31:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")[J

line 32:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")[J

line 33:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")[J

line 34:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")[J

line 35:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")[J

line 36:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")[J

line 37:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")[J

line 38:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")[J

line 39:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")[J

line 40:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")[J

line 41:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")[J

line 42:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")[J

line 43:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")[J

line 44: augroup END[J

finished sourcing /usr/share/vim/vim73/plugin/gzip.vim[J
chdir(/usr/share/vim/vim73/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim73/plugin/matchparen.vim"[J
line 1: " Vim plugin for showing matching parens[J

line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>[J

line 3: " Last Change: 2011 Aug 27[J

line 4: [J

line 5: " Exit quickly when:[J

line 6: " - this plugin was already loaded (or disabled)[J

line 7: " - when 'compatible' is set[J

line 8: " - the "CursorMoved" autocmd event is not availble.[J

line 9: if exists("g:loaded_matchparen") || &cp || !exists("##CursorMoved")[J

line 10:   finish[J

line 11: endif[J

line 12: let g:loaded_matchparen = 1[J

line 13: [J

line 14: augroup matchparen[J

line 15:   " Replace all matchparen autocommands[J

line 16:   autocmd! CursorMoved,CursorMovedI,WinEnter * call s:Highlight_Matching_Pair()[J

line 17: augroup END[J

line 18: [J

line 19: " Skip the rest if it was already done.[J

line 20: if exists("*s:Highlight_Matching_Pair")[J

line 21:   finish[J

line 22: endif[J

line 23: [J

line 24: let s:cpo_save = &cpo[J

line 25: set cpo-=C[J

line 26: [J

line 27: " The function that is invoked (very often) to define a ":match" highlighting[J

line 28: " for any matching paren.[J

line 29: function! s:Highlight_Matching_Pair()[J

line 145: [J

line 146: " Define commands that will disable and enable the plugin.[J

line 148: command! NoMatchParen windo 3match none | unlet! g:loaded_matchparen | au! matchparen[J

line 149: command! DoMatchParen runtime plugin/matchparen.vim | windo doau CursorMoved[J

line 150: [J

line 151: let &cpo = s:cpo_save[J

line 152: unlet s:cpo_save[J

finished sourcing /usr/share/vim/vim73/plugin/matchparen.vim[J
chdir(/usr/share/vim/vim73/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim73/plugin/netrwPlugin.vim"[J
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network[J

line 2: "            PLUGIN SECTION[J

line 3: " Date:^I^IAug 24, 2011[J

line 4: " Maintainer:^ICharles E Campbell, Jr <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>[J

line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim[J

line 6: " Copyright:    Copyright (C) 1999-2008 Charles E. Campbell, Jr. {{{1[J

line 7: "               Permission is hereby granted to use and distribute this code,[J

line 8: "               with or without modifications, provided that this copyright[J

line 9: "               notice is copied with it. Like anything else that's free,[J

line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided[J

line 11: "               *as is* and comes with no warranty of any kind, either[J

line 12: "               expressed or implied. By using this plugin, you agree that[J

line 13: "               in no event will the copyright holder be liable for any damages[J

line 14: "               resulting from the use of this software.[J

line 15: "[J

line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1[J

line 17: "  (James 1:22 RSV)[J

line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-[J

line 19: " Load Once: {{{1[J

line 20: if &cp || exists("g:loaded_netrwPlugin")[J

line 21:  finish[J

line 22: endif[J

line 23: let g:loaded_netrwPlugin = "v145"[J

line 24: if v:version < 702[J

line 25:  echohl WarningMsg | echo "***netrw*** you need vim version 7.2 for this version of netrw" | echohl None[J

line 25:  echo "***netrw*** you need vim version 7.2 for this version of netrw" | echohl None[J

line 25:  echohl None[J

line 26:  finish[J

line 27: endif[J

line 28: let s:keepcpo = &cpo[J

line 29: set cpo&vim[J

line 30: [J

line 31: " ---------------------------------------------------------------------[J

line 32: " Public Interface: {{{1[J

line 33: [J

line 34: " Local Browsing: {{{2[J

line 35: augroup FileExplorer[J

line 36:  au![J

line 37: " au BufReadCmd *[/\\]^Isil! call s:LocalBrowse(expand("<amatch>")) [J

line 38: " au BufEnter *[^/\\]^Isil! call s:LocalBrowse(expand("<amatch>"))[J

line 39: " au VimEnter *[^/\\]^Isil! call s:VimEnter(expand("<amatch>"))[J

line 40:  au BufEnter *^Isil! call s:LocalBrowse(expand("<amatch>"))[J

line 41:  au VimEnter *^Isil! call s:VimEnter(expand("<amatch>"))[J

line 42:  if has("win32") || has("win95") || has("win64") || has("win16")[J

line 43:   au BufEnter .* sil! call s:LocalBrowse(expand("<amatch>"))[J

line 44:  endif[J

line 45: augroup END[J

line 46: [J

line 47: " Network Browsing Reading Writing: {{{2[J

line 48: augroup Network[J

line 49:  au![J

line 50:  au BufReadCmd   file://*^I^Icall netrw#FileUrlRead(expand("<amatch>"))[J

line 51:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "silent doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "silent doau BufReadPost ".fnameescape(expand("<amatch>"))[J

line 52:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "silent doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "silent doau FileReadPost ".fnameescape(expand("<amatch>"))[J

line 53:  au BufWriteCmd  ftp://*,rcp://*,scp://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "silent doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "silent doau BufWritePost ".fnameescape(expand("<amatch>"))[J

line 54:  au FileWriteCmd ftp://*,rcp://*,scp://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "silent doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "silent doau FileWritePost ".fnameescape(expand("<amatch>"))[J

line 55:  try[J

line 56:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))[J

line 57:  catch /^Vim\%((\a\+)\)\=:E216/[J

line 58:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))[J

line 59:  endtry[J

line 60: augroup END[J

line 61: [J

line 62: " Commands: :Nread, :Nwrite, :NetUserPass {{{2[J

line 63: com! -count=1 -nargs=*^INread^I^Icall netrw#NetrwSavePosn()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call netrw#NetrwRestorePosn()[J

line 64: com! -range=% -nargs=*^INwrite^I^Icall netrw#NetrwSavePosn()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call netrw#NetrwRestorePosn()[J

line 65: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)[J

line 66: com! -nargs=*^I        Nsource^I^Icall netrw#NetrwSavePosn()<bar>call netrw#NetSource(<f-args>)<bar>call netrw#NetrwRestorePosn()[J

line 67: [J

line 68: " Commands: :Explore, :Sexplore, Hexplore, Vexplore {{{2[J

line 69: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)[J

line 70: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)[J

line 71: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)[J

line 72: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)[J

line 73: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)[J

line 74: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)[J

line 75: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)[J

line 76: [J

line 77: " Commands: NetrwSettings {{{2[J

line 78: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()[J

line 79: com! -bang^INetrwClean^Icall netrw#NetrwClean(<bang>0)[J

line 80: [J

line 81: " Maps:[J

line 82: if !exists("g:netrw_nogx") && maparg('gx','n') == ""[J

line 83:  if !hasmapto('<Plug>NetrwBrowseX')[J

line 84:   nmap <unique> gx <Plug>NetrwBrowseX[J

line 85:  endif[J

line 86:  nno <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)<cr>[J

line 87: endif[J

line 88: [J

line 89: " ---------------------------------------------------------------------[J

line 90: " LocalBrowse: {{{2[J

line 91: fun! s:LocalBrowse(dirname)[J

line 109: [J

line 110: " ---------------------------------------------------------------------[J

line 111: " s:VimEnter: {{{2[J

line 112: fun! s:VimEnter(dirname)[J

line 117: [J

line 118: " ---------------------------------------------------------------------[J

line 119: " NetrwStatusLine: {{{1[J

line 120: fun! NetrwStatusLine()[J

line 131: [J

line 132: " ------------------------------------------------------------------------[J

line 133: " NetUserPass: set username and password for subsequent ftp transfer {{{1[J

line 134: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password[J

line 135: "^I    :call NetUserPass("uid")^I^I-- will prompt for password[J

line 136: "^I    :call NetUserPass("uid","password") -- sets global userid and password[J

line 137: fun! NetUserPass(...)[J

line 161: [J

line 162: " ------------------------------------------------------------------------[J

line 163: " Modelines And Restoration: {{{1[J

line 164: let &cpo= s:keepcpo[J

line 165: unlet s:keepcpo[J

line 166: " vim:ts=8 fdm=marker[J

finished sourcing /usr/share/vim/vim73/plugin/netrwPlugin.vim[J
chdir(/usr/share/vim/vim73/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim73/plugin/rrhelper.vim"[J
line 1: " Vim plugin with helper function(s) for --remote-wait[J

line 2: " Maintainer: Flemming Madsen <fma@cci.dk>[J

line 3: " Last Change: 2008 May 29[J

line 4: [J

line 5: " Has this already been loaded?[J

line 6: if exists("loaded_rrhelper") || !has("clientserver")[J

line 7:   finish[J

finished sourcing /usr/share/vim/vim73/plugin/rrhelper.vim[J
chdir(/usr/share/vim/vim73/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim73/plugin/spellfile.vim"[J
line 1: " Vim plugin for downloading spell files[J

line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>[J

line 3: " Last Change: 2006 Feb 01[J

line 4: [J

line 5: " Exit quickly when:[J

line 6: " - this plugin was already loaded[J

line 7: " - when 'compatible' is set[J

line 8: " - some autocommands are already taking care of spell files[J

line 9: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")[J

line 10:   finish[J

line 11: endif[J

line 12: let loaded_spellfile_plugin = 1[J

line 13: [J

line 14: " The function is in the autoload directory.[J

line 15: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))[J

finished sourcing /usr/share/vim/vim73/plugin/spellfile.vim[J
chdir(/usr/share/vim/vim73/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim73/plugin/tarPlugin.vim"[J
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles[J

line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>[J

line 3: " Modified by Charles E. Campbell, Jr.[J

line 4: " Distributed under the GNU General Public License.[J

line 5: "[J

line 6: " Updates are available from <http://michael.toren.net/code/>.  If you[J

line 7: " find this script useful, or have suggestions for improvements, please[J

line 8: " let me know.[J

line 9: " Also look there for further comments and documentation.[J

line 10: "[J

line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.[J

line 12: " ---------------------------------------------------------------------[J

line 13: "  Load Once: {{{1[J

line 14: if &cp || exists("g:loaded_tarPlugin")[J

line 15:  finish[J

line 16: endif[J

line 17: let g:loaded_tarPlugin = "v28"[J

line 18: let s:keepcpo          = &cpo[J

line 19: set cpo&vim[J

line 20: [J

line 21: " ---------------------------------------------------------------------[J

line 22: "  Public Interface: {{{1[J

line 23: augroup tar[J

line 24:   au![J

line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)[J

line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)[J

line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))[J

line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))[J

line 29: [J

line 30:   if has("unix")[J

line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)[J

line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)[J

line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))[J

line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))[J

line 35:   endif[J

line 36: [J

line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))[J

line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))[J

line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))[J

line 42:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 43:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))[J

line 44:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))[J

line 45:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 46: augroup END[J

line 47: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)[J

line 48: [J

line 49: " ---------------------------------------------------------------------[J

line 50: " Restoration And Modelines: {{{1[J

line 51: " vim: fdm=marker[J

line 52: let &cpo= s:keepcpo[J

line 53: unlet s:keepcpo[J

finished sourcing /usr/share/vim/vim73/plugin/tarPlugin.vim[J
chdir(/usr/share/vim/vim73/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim73/plugin/tohtml.vim"[J
line 1: " Vim plugin for converting a syntax highlighted file to HTML.[J

line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>[J

line 3: " Last Change: 2011 May 26[J

line 4: "[J

line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and[J

line 6: " $VIMRUNTIME/syntax/2html.vim[J

line 7: "[J

line 8: " TODO:[J

line 9: "   * Options for generating the CSS in external style sheets. New :TOcss[J

line 10: "     command to convert the current color scheme into a (mostly) generic CSS[J

line 11: "     stylesheet which can be re-used. Alternate stylesheet support?[J

line 12: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :[J

line 13: "^I- listchars support[J

line 14: "^I- full-line background highlight[J

line 15: "^I- other?[J

line 16: "   * Font auto-detection similar to[J

line 17: "     http://www.vim.org/scripts/script.php?script_id=2384[J

line 18: "   * Explicitly trigger IE8+ Standards Mode?[J

line 19: "   * Make it so deleted lines in a diff don't create side-scrolling[J

line 20: "   * Restore open/closed folds and cursor position after processing each file[J

line 21: "     with option not to restore for speed increase[J

line 22: "   * Undercurl support via dotted bottom border?[J

line 23: "   * Add extra meta info (generation time, etc.)?[J

line 24: "   * Tidy up so we can use strict doctype in even more situations[J

line 25: "   * Implementation detail: add threshold for writing the lines to the html[J

line 26: "     buffer before we're done (5000 or so lines should do it)[J

line 27: "   * TODO comments for code cleanup scattered throughout[J

line 28: "[J

line 29: [J

line 30: if exists('g:loaded_2html_plugin')[J

line 31:   finish[J

line 32: endif[J

line 33: let g:loaded_2html_plugin = 'vim7.3_v10'[J

line 34: [J

line 35: "[J

line 36: " Changelog:[J

line 37: "   7.3_v10 (this version): Fix error E684 when converting a range wholly inside[J

line 38: "                           multiple nested folds with dynamic folding on.[J

line 39: "                           Also fix problem with foldtext in this situation.[J

line 40: "   7.3_v9  (0877b8d6370e): Add html_pre_wrap option active with html_use_css[J

line 41: "                           and without html_no_pre, default value same as[J

line 42: "                           'wrap' option, (Andy Spencer). Don't use[J

line 43: "                           'fileencoding' for converted document encoding if[J

line 44: "                           'buftype' indicates a special buffer which isn't[J

line 45: "                           written.[J

line 46: "   7.3_v8  (85c5a72551e2): Add html_expand_tabs option to allow leaving tab[J

line 47: "                           characters in generated output (Andy Spencer).[J

line 48: "                           Escape text that looks like a modeline so Vim[J

line 49: "                           doesn't use anything in the converted HTML as a[J

line 50: "                           modeline. Bugfixes: Fix folding when a fold starts[J

line 51: "                           before the conversion range. Remove fold column when[J

line 52: "                           there are no folds.[J

line 53: "   7.3_v7  (840c3cadb842): see betas released on vim_dev below:[J

line 54: "                 7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.[J

line 55: "                 7.3_v7b2: Remove automatic detection of encodings that are not[J

line 56: "                           supported by all major browsers according to[J

line 57: "                           http://wiki.whatwg.org/wiki/Web_Encodings and[J

line 58: "                           convert to UTF-8 for all Unicode encodings. Make[J

line 59: "                           HTML encoding to Vim encoding detection be[J

line 60: "                           case-insensitive for built-in pairs.[J

line 61: "                 7.3_v7b1: Remove use of setwinvar() function which cannot be[J

line 62: "                           called in restricted mode (Andy Spencer). Use[J

line 63: "                           'fencoding' instead of 'encoding' to determine by[J

line 64: "                           charset, and make sure the 'fenc' of the generated[J

line 65: "                           file matches its indicated charset. Add charsets for[J

line 66: "                           all of Vim's natively supported encodings.[J

line 67: "   7.3_v6  (0d3f0e3d289b): Really fix bug with 'nowrapscan', 'magic' and other[J

line 68: "                           user settings interfering with diff mode generation,[J

line 69: "                           trailing whitespace (e.g. line number column) when[J

line 70: "                           using html_no_pre, and bugs when using[J

line 71: "                           html_hover_unfold.[J

line 72: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync[J

line 73: "                           folds in diff mode when first line was folded.[J

line 74: "   7.3_v4  (7e008c174cc3): Bugfixes, especially for xhtml markup, and diff mode[J

line 75: "   7.3_v3  (a29075150aee): Refactor option handling and make html_use_css[J

line 76: "                           default to true when not set to anything. Use strict[J

line 77: "                           doctypes where possible. Rename use_xhtml option to[J

line 78: "                           html_use_xhtml for consistency. Use .xhtml extension[J

line 79: "                           when using this option. Add meta tag for settings.[J

line 80: "   7.3_v2  (80229a724a11): Fix syntax highlighting in diff mode to use both the[J

line 81: "                           diff colors and the normal syntax colors[J

line 82: "   7.3_v1  (e7751177126b): Add conceal support and meta tags in output[J

line 83: "   Pre-v1 baseline: Mercurial changeset 3c9324c0800e[J

line 84: [J

line 85: " Define the :TOhtml command when:[J

line 86: " - 'compatible' is not set[J

line 87: " - this plugin was not already loaded[J

line 88: " - user commands are available.[J

line 89: if !&cp && !exists(":TOhtml") && has("user_commands")[J

line 90:   command -range=% TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)[J

line 91: endif[J

line 92: [J

line 93: " Make sure any patches will probably use consistent indent[J

line 94: "   vim: ts=8 sw=2 sts=2 noet[J

finished sourcing /usr/share/vim/vim73/plugin/tohtml.vim[J
chdir(/usr/share/vim/vim73/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim73/plugin/vimballPlugin.vim"[J
line 1: " vimballPlugin : construct a file containing both paths and files[J

line 2: " Author: Charles E. Campbell, Jr.[J

line 3: " Copyright: (c) 2004-2010 by Charles E. Campbell, Jr.[J

line 4: "            The VIM LICENSE applies to Vimball.vim, and Vimball.txt[J

line 5: "            (see |copyright|) except use "Vimball" instead of "Vim".[J

line 6: "            No warranty, express or implied.[J

line 7: "  *** ***   Use At-Your-Own-Risk!   *** ***[J

line 8: "[J

line 9: " (Rom 2:1 WEB) Therefore you are without excuse, O man, whoever you are who[J

line 10: "      judge. For in that which you judge another, you condemn yourself. For[J

line 11: "      you who judge practice the same things.[J

line 12: " GetLatestVimScripts: 1502 1 :AutoInstall: vimball.vim[J

line 13: [J

line 14: " ---------------------------------------------------------------------[J

line 15: "  Load Once: {{{1[J

line 16: if &cp || exists("g:loaded_vimballPlugin")[J

line 17:  finish[J

finished sourcing /usr/share/vim/vim73/plugin/vimballPlugin.vim[J
chdir(/usr/share/vim/vim73/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/share/vim/vim73/plugin/zipPlugin.vim"[J
line 1: " zipPlugin.vim: Handles browsing zipfiles[J

line 2: "            PLUGIN PORTION[J

line 3: " Date:^I^I^IAug 15, 2011[J

line 4: " Maintainer:^ICharles E Campbell, Jr <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>[J

line 5: " License:^I^IVim License  (see vim's :help license)[J

line 6: " Copyright:    Copyright (C) 2005-2011 Charles E. Campbell, Jr. {{{1[J

line 7: "               Permission is hereby granted to use and distribute this code,[J

line 8: "               with or without modifications, provided that this copyright[J

line 9: "               notice is copied with it. Like anything else that's free,[J

line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty[J

line 11: "               of any kind, either expressed or implied. By using this[J

line 12: "               plugin, you agree that in no event will the copyright[J

line 13: "               holder be liable for any damages resulting from the use[J

line 14: "               of this software.[J

line 15: "[J

line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.[J

line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.[J

line 18: " ---------------------------------------------------------------------[J

line 19: " Load Once: {{{1[J

line 20: if &cp || exists("g:loaded_zipPlugin")[J

line 21:  finish[J

line 22: endif[J

line 23: let g:loaded_zipPlugin = "v25"[J

line 24: let s:keepcpo          = &cpo[J

line 25: set cpo&vim[J

line 26: [J

line 27: " ---------------------------------------------------------------------[J

line 28: " Public Interface: {{{1[J

line 29: augroup zip[J

line 30:  au![J

line 31:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)[J

line 32:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)[J

line 33:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))[J

line 34:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))[J

line 35: [J

line 36:  if has("unix")[J

line 37:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)[J

line 38:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)[J

line 39:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))[J

line 40:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))[J

line 41:  endif[J

line 42: [J

line 43:  au BufReadCmd   *.zip,*.jar,*.xpi,*.war,*.ear,*.celzip,*.oxt^I^Icall zip#Browse(expand("<amatch>"))[J

line 44: augroup END[J

line 45: [J

line 46: " ---------------------------------------------------------------------[J

line 47: "  Restoration And Modelines: {{{1[J

line 48: "  vim: fdm=marker[J

line 49: let &cpo= s:keepcpo[J

line 50: unlet s:keepcpo[J

finished sourcing /usr/share/vim/vim73/plugin/zipPlugin.vim[J
Searching for "/usr/share/vim/vimfiles/after/plugin/**/*.vim"[J
Searching for "/var/lib/vim/addons/after/plugin/**/*.vim"[J
Searching for "/home/miph/.vim/after/plugin/**/*.vim"[J
Reading viminfo file "/home/miph/.viminfo" info oldfiles[J[?1000h
Press ENTER or type command to continue[?1000l[?12l[?25h[?1000h[?1049h[?1h=[1;24r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[24;1HExecuting BufEnter Auto commands for "*"
autocommand sil! call s:LocalBrowse(expand("<amatch>"))
line 0: sil! call s:LocalBrowse(expand("<amatch>"))
Executing VimEnter Auto commands for "*"[?1000l
[38;5;121mPress ENTER or type command to continue[?12l[?25h[?1000h[m
[?25lautocommand sil! call s:VimEnter(expand("<amatch>"))[?1000l
[38;5;121mPress ENTER or type command to continue[?12l[?25h[?1000h[m
[?25lline 0: sil! call s:VimEnter(expand("<amatch>"))
[?1000l[38;5;121mPress ENTER or type command to continue[?12l[?25h[?1000h[?25l[mExecuting CursorMoved Auto commands for "*"[?1000l
[38;5;121mPress ENTER or type command to continue[?12l[?25h[?1000h[m
[?25lautocommand call s:Highlight_Matching_Pair()[?1000l
[38;5;121mPress ENTER or type command to continue[?12l[?25h[?1000h[m
[?25lline 0: call s:Highlight_Matching_Pair()
calling function <SNR>14_Highlight_Matching_Pair()
line 1:   " Remove any previous match.
line 2:   if exists('w:paren_hl_on') && w:paren_hl_on
line 3:     3match none
line 4:     let w:paren_hl_on = 0
line 5:   endif
line 6:
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12:
line 13:   " Get the character under the cursor and check if it's in 'matchpair
[23;80Hs[24;1H'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17:
line 18:   let c = getline(c_lnum)[c_col - 1]
line 19:   let plist = split(&matchpairs, '.\zs[:,]')
line 20:   let i = index(plist, c)
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hline 21:   if i < 0
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hline 22:     " not found, in Insert mode try character before the cursor
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hline 23:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hline 24:[7Clet before = 1
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hline 25:[7Clet c = getline(c_lnum)[c_col - 2]
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hline 26:[7Clet i = index(plist, c)
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hline 27:     endif
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hline 28:     if i < 0
[?1000l[38;5;121m-- More --[?12l[?25h SPACE/d/j: screen/page/line down, b/u/k: up, q: quit [m[24;1H[K[?1000h[?25l[24;1Hline 29:[7C" not found, nothing to do
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hline 30:[7Creturn
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hfunction <SNR>14_Highlight_Matching_Pair returning #0
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[?25l[24;1Hcontinuing in CursorMoved Auto commands for "*"
[?1000l[38;5;121m-- More --[?12l[?25h[m[24;1H[K[?1000h[27m[m[H[2J[1;1H[1m [No Name] [m[7m                                                                     [?25l[m[3;1H[1m[34m~                                                                               [4;1H~                                                                               [5;1H~                                                                               [6;1H~                                                                               [7;1H~                                                                               [8;1H~                                                                               [9;1H~                                                                               [10;1H~                                                                               [11;1H~                                                                               [12;1H~                                                                               [13;1H~                                                                               [14;1H~                                                                               [15;1H~                                                                               [16;1H~                                                                               [17;1H~                                                                               [18;1H~                                                                               [19;1H~                                                                               [20;1H~                                                                               [21;1H~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H0,0-1[9CAll[6;32HVIM - Vi IMproved[8;33Hversion 7.3.547[9;29Hby Bram Moolenaar et al.[10;13HModified by pkg-vim-maintainers@lists.alioth.debian.org[11;19HVim is open source and freely distributable[13;26HBecome a registered Vim user![14;18Htype  :help register[32m<Enter>[m   for information [16;18Htype  :q[32m<Enter>[m               to exit         [17;18Htype  :help[32m<Enter>[m  or  [32m<F1>[m  for on-line help[18;18Htype  :help version7[32m<Enter>[m   for version info[2;1H[?12l[?25h[24;1H[?25lWriting viminfo file "/home/miph/.viminfo"[24;63H[K[24;1H[?1000l[?1l>[?12l[?25h[?1049l
