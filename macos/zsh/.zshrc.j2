# History command configuration
HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_all_dups   # old dupes are deleted
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data
setopt append_history
setopt hist_find_no_dups
setopt hist_reduce_blanks
setopt inc_append_history     # immediately append to history file

# Directories
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus
setopt no_case_glob


setopt multios              # enable redirect to multiple streams: echo >file1 >file2
setopt long_list_jobs       # show long list format job notifications
setopt interactivecomments  # recognize comments


# Filter our sensitive content from history
HISTORY_FILTER_EXCLUDE=(_key token access bearer security password session)
function _history_filter() {
  local cmd="${1:l}"
  local warning="\033[36;2m\033[36;3m🛡️skipping history for this command.\033[0m\n"
  local pattern
  for pattern in $HISTORY_FILTER_EXCLUDE; do
    if [[ "$cmd" = *"$pattern"* ]]; then
      [[ -z "$HISTORY_FILTER_SILENT" ]] && (>&2 printf "$warning")
      return 1
    fi
  done
  return 0
}
autoload -Uz add-zsh-hook
add-zsh-hook zshaddhistory _history_filter
##


function remove-from-history {
    echo "Removing $1 from history..."
    LC_ALL=C test $1 && sed -i "/$1/d" $HISTFILE
    fc -R
    zsh
}

# completion
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

# ssh
(eval "$(ssh-agent -s)") > /dev/null
(ssh-add $HOME/.ssh/id_github) 2> /dev/null
alias ssh="kitty +kitten ssh"

# ls
alias ls=eza
alias ll='eza -la'

# git
alias gitst='git status -sb'
alias gitcb='git rev-parse --symbolic-full-name --abbrev-ref HEAD'
alias gitc='lazygit'
alias gitco='git checkout'
alias gitb='git branch'
function gitlb(){
    git for-each-ref --format='%(refname:short)' --sort=-authordate --count=10 refs/heads/;
}
alias git-count='git shortlog -sn'
alias git-undo='git reset --soft HEAD^'
alias git-clear='git reset --hard HEAD'
alias gits='git stash'
alias gitsb='git checkout $(git branch | fzf)'
alias git-push='git push origin $(gitcb)'
alias git-pull='git pull origin $(gitcb)'

# nvim
alias vim=nvim
alias vi=nvim

# containers
alias dkc='docker-compose'


# go
export PATH="/usr/local/go/bin:$HOME/go/bin:$PATH"


{{ dep('../nvm').zsh_rc }}
{{ dep('../pyenv').zsh_rc }}
{{ dep('../kitty').zsh_rc }}
{{ dep('../starship').zsh_rc }}
{{ dep('macos:asdf').zsh_rc }}
{{ dep('macos:yazi').zsh_rc }}
{{ dep('macos:fzf').zsh_rc }}


##
# envrc-tools
source ~/Develop/playground/envrc-tools/envrc.sh; envrc hook zsh


##
# Secrets
{% raw %}
function st-get() {
  local secret_name="$1"

  local secret_raw=$(security find-generic-password -C note -s "st:${secret_name}" -w)
  if [ ${#secret_raw} -le 255 ]; then
    echo $secret_raw
  else
    local secret=$(
        echo "$secret_raw" | xxd -r -p | \
        xmllint --xpath "//dict/data/text()" - | \
        base64 --decode | \
        textutil -stdin -convert txt -stdout
    )
    echo $secret
  fi
}

function st-set() {
  (
    set -e
    local secret_name="$1"
    local secret="$2"
    security delete-generic-password -a "$(whoami)" -s "st:${secret_name}" || true
    security delete-generic-password -a "$(whoami)" -C "note" -s "st:${secret_name}" || true
    security add-generic-password -a "$(whoami)" -C note  -s "st:${secret_name}" -w "${secret}" -U
    echo "Successfult stored '$secret_name' in the keychain."
  )
}
function st-sync() {
  (
    set -e
    local bw_session=$(bw unlock --raw)
    bw --session "${bw_session}" sync
    for secret_name in "$@"; do
      echo "Syncing '$secret_name'..."
      local secret="$(bw --session "${bw_session}" get notes "${secret_name}")"
      st-set "$secret_name" "$secret" || echo "Failed to sync ${secret_name}!"
    done
  )
}
{% endraw %}



# ZSH plugins
# - zsh-syntax-highlighting
source ${HOMEBREW_PREFIX}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# - zsh-history-substring-search
source ${HOMEBREW_PREFIX}/share/zsh-history-substring-search/zsh-history-substring-search.zsh
bindkey '^K' history-substring-search-up
bindkey '^J' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
# - zsh-autosuggestions
source ${HOMEBREW_PREFIX}/share/zsh-autosuggestions/zsh-autosuggestions.zsh
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#495269'
bindkey '^L' autosuggest-execute
bindkey '^ ' autosuggest-accept

# Initialize completion
autoload -Uz compinit && compinit


# Other Dev functions / utils
function pyclean () {
  find . -type f -name "*.py[co]" -delete
  find . -type d -name "__pycache__" -delete
}
